<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 深入理解java虚拟机 | SargerasWang's Blog]]></title>
  <link href="https://sargeraswang.com/blog/categories/shen-ru-li-jie-javaxu-ni-ji/atom.xml" rel="self"/>
  <link href="https://sargeraswang.com/"/>
  <updated>2018-11-27T17:16:49+08:00</updated>
  <id>https://sargeraswang.com/</id>
  <author>
    <name><![CDATA[SargerasWang]]></name>
    <email><![CDATA[sargeraswang@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[第3章 垃圾收集器与内存分配策略]]></title>
    <link href="https://sargeraswang.com/blog/2014/02/03/la-ji-shou-ji-qi-yu-nei-cun-fen-pei-ce-lue/"/>
    <updated>2014-02-03T16:40:00+08:00</updated>
    <id>https://sargeraswang.com/blog/2014/02/03/la-ji-shou-ji-qi-yu-nei-cun-fen-pei-ce-lue</id>
    <content type="html"><![CDATA[<h3>对象已死吗</h3>

<h4>引用计数算法</h4>

<blockquote><p>给对象添加引用计数器，每当有一个地方引用它时，计数器值就加1；当引用失效时，计数器值就减1；任何时刻计数器为0的对象就是不可能再被使用的。</p>

<p>它很难解决对象之间互相循环引用的问题。</p></blockquote>

<!-- more -->


<p><a href="http://item.jd.com/11252778.html"><img src="" alt="" /></a></p>

<p>``` java
/<em>*
 * VM Args: -XX:+PrintGCDetails
 </em>/
public class ReferenceCountingGC {</p>

<pre><code>public Object instance = null;
private static final int _1MB = 1024 * 1024;

/*
 * 这个成员属性的唯一意义就是占点内存，以便能在GC日志中看清楚否被回收过
 */
private byte[] bigSize = new byte[2 * _1MB];

public static void testGC() {
    ReferenceCountingGC objA = new ReferenceCountingGC();
    ReferenceCountingGC objB = new ReferenceCountingGC();
    objA.instance = objB;
    objB.instance = objA;

    objA = null;
    objB = null;

    // 假设在这行发生GC，objA和objB是否能被回收？
    System.gc();
}

public static void main(String[] args) {
    testGC();
}
</code></pre>

<p>}
<code>
输入日志：
</code>
[Full GC (System) [CMS: 0K->330K(63872K), 0.0114563 secs] 5462K->330K(83008K), [CMS Perm : 4629K->4628K(21248K)], 0.0115589 secs] [Times: user=0.02 sys=0.00, real=0.01 secs]
Heap
 par new generation   total 19136K, used 1021K [7f3000000, 7f44c0000, 7f44c0000)
  eden space 17024K,   6% used [7f3000000, 7f30ff658, 7f40a0000)
  from space 2112K,   0% used [7f40a0000, 7f40a0000, 7f42b0000)
  to   space 2112K,   0% used [7f42b0000, 7f42b0000, 7f44c0000)
 concurrent mark-sweep generation total 63872K, used 330K [7f44c0000, 7f8320000, 7fae00000)
 concurrent-mark-sweep perm gen total 21248K, used 4689K [7fae00000, 7fc2c0000, 800000000)
```</p>

<blockquote><p>其中<code>5462K-&gt;330K</code>说明虚拟机并没有因为这两个对象互相引用就不回收他们，这也从侧面说明虚拟机并不通过引用计数算法来判断对象是否存活的。</p></blockquote>

<h4>可达性分析算法</h4>

<ul>
<li>主流商用程序语言都是通过<strong>可达性分析(Reachability Analysis)</strong>来判定对象是否存活的。</li>
<li>通过一系列称为<code>GC Roots</code>的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链，当一个对象到GC Roots没有任何引用链相连时，则证明此对象是不可用的。</li>
<li>Java语言中的GC Roots：

<ul>
<li>虚拟机栈（栈帧中的本地变量表）中引用的对象</li>
<li>方法区中类静态属性引用的对象。</li>
<li>方法区中常量引用的对象。</li>
<li>本地方法栈中JNI（即一般说的Native方法）引用的对象。</li>
</ul>
</li>
</ul>


<h4>引用的分类</h4>

<ul>
<li>JDK1.2之后，Java对引用的概念进行了扩充

<ul>
<li>强引用（Strong Reference）：在程序代码之中普遍存在的 <code>Object obj = new Object()</code>，只要强引用还存在，垃圾收集器永远不会回收掉被引用的对象。</li>
<li>软引用（Soft Reference）：有用但并非必需的对象，<strong>在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行第二次回收</strong>，使用<code>SoftReference</code>类来实现软引用。</li>
<li>弱引用（Weak Reference）：非必须对象，<strong>只能生存到下一次垃圾收集发生之前</strong>，使用<code>WeakReference</code>类来实现弱引用。</li>
<li>虚引用（Phantom Reference）：也称<em>幽灵引用</em>或者<em>幻影引用</em>，**为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知,在JDK1.2之后，使用<code>PhantomReference</code>类来实现虚引用。</li>
</ul>
</li>
</ul>


<h4>生存还是死亡</h4>

<ul>
<li><p>要真正宣告一个对象死亡，至少要经历两次标记过程：</p>

<ul>
<li>可达性分析后，没有与GC Roots相连接的引用链，将会被第一次标记并进行一次筛选，当对象没有覆盖<code>finalize()</code>方法或者<code>finalize()</code>方法已经被虚拟机调用过，都没有必要执行<code>finalize()</code>方法。</li>
<li>有必要执行<code>finalize()</code>方法的对象会被放在<code>F-Queue</code>队列中，稍后由一个由一个虚拟机自动建立的Finalizer线程去执行它，<code>finalize()</code>方法是对象逃脱死亡命运的最后一次机会，</li>
</ul>
</li>
<li><p>一次对象自我拯救的演示</p></li>
</ul>


<p>``` java
public class FinalizeEscapeGC {</p>

<pre><code>public static FinalizeEscapeGC SAVE_HOOK = null;

public void isAlive() {
    System.out.println("yes,i am still alive :)");
}

@Override
protected void finalize() throws Throwable {
    super.finalize();
    System.out.println("finalize method executed!");
    FinalizeEscapeGC.SAVE_HOOK = this;
}

public static void main(String[] args) throws Exception {
    SAVE_HOOK = new FinalizeEscapeGC();

    // 对象第一次成功拯救自己
    SAVE_HOOK = null;
    System.gc();
    // 因为finalize方法优先级很低，所以暂停0.5秒以等待它
    Thread.sleep(500);
    if (SAVE_HOOK != null) {
        SAVE_HOOK.isAlive();
    } else {
        System.out.println("no,i am dead :(");
    }

    // 下面这段代码与上面的完全相同，但是这次自救却失败了
    SAVE_HOOK = null;
    System.gc();
    Thread.sleep(500);
    if (SAVE_HOOK != null) {
        SAVE_HOOK.isAlive();
    } else {
        System.out.println("no,i am dead :(");
    }

}
</code></pre>

<p>}
<code>
执行结果：
</code>
finalize method executed!
yes,i am still alive :)
no,i am dead :(
```
<strong>对象自救的机会只有一次，因为一个对象的finalize（）方法最多只会被系统自动调用一次</strong></p>

<blockquote><p><code>finalize()</code>方法只是Java刚诞生时为了使C/C++程序员更容易接受它所作出的一个妥协，运行代价高昂，不确定性大，无法保证各个对象的调用顺序，应尽量避免使用。</p></blockquote>

<h4>回收方法区</h4>

<p>要判定一个类是否是“无用的类”的条件，需要同时满足下面3个条件：</p>

<ol>
<li>该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例。</li>
<li>加载该类的ClassLoader已经被回收</li>
<li>该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li>
</ol>


<blockquote><p>在大量使用反射、动态代理、CGLib等ByteCode框、动态生成JSP以及OSGi这类频繁自定义ClassLoader的场景都需要虚拟机具备类卸载的功能，以保证永久带不会溢出。</p></blockquote>

<h3>垃圾收集算法</h3>

<p>几种算法的思想及其发展过程</p>

<h4>标记-清除算法</h4>

<blockquote><p>标记出所有需要回收的对象，之后统一回收所有被标记的对象。</p></blockquote>

<p>两个不足之处：</p>

<ul>
<li>效率问题：标记和清除两个过程的效率都不高</li>
<li>空间问题：标记清除之后会产生大量不连续的内存碎片，会导致以后在程序运行过程中需要分配大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</li>
</ul>


<h4>复制算法</h4>

<blockquote><p>将可用内存划分为大小相等的两块，每次只使用其中一块，当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。</p></blockquote>

<ul>
<li>商业虚拟机将内存分为一块较大的Eden和两块较小的Survivor空间，每次使用Eden和其中一块Survivor。当回收时，将Eden和Survivor中还存活着的对象一次性地复制到另外一块Survivor空间上，清理掉Eden和刚才用过的Survivor空间。</li>
<li>HotSpot虚拟机默认Eden和Survivor的大小比例是8：1</li>
</ul>


<h4>标记-整理算法</h4>

<blockquote><p>过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p></blockquote>

<h4>分代收集算法</h4>

<blockquote><p>当前商业虚拟机的垃圾收集都采用“分代收集”算法，根据对象存活周期的不同将内存划分为几块，一般是把Java堆分为新生代和老年代，根据各个年代的特点采用最适当的收集算法.</p></blockquote>

<h3>HotSpot的算法实现</h3>

<blockquote><p>在HotSpot的实现中，使用一组称为<code>OopMap</code>的数据结构来直接得知哪些地方存放着对象引用。</p></blockquote>

<h4>安全点(SafePoint)</h4>

<blockquote><p> 程序执行时并非在所有地方都能停顿下来开始GC，只有在到达安全点时才能暂停。</p></blockquote>

<ul>
<li>安全点的选定基本上是以程序“是否具有让程序长时间执行的特征”为标准进行选定的。</li>
<li>“长时间执行”的最明显特征就是指令序列复用，例如方法调用、循环跳转、异常跳转等，所以具有这些功能的指令才会产生Safepoint。</li>
<li>抢先式中断：在GC发生时，首先把所有线程全部中断，如果发现有线程中断的地方不在安全点上，就恢复线程，让它“跑”到安全点上。</li>
<li>主动式中断：当GC需要中断线程的时候，不直接对线程操作，仅仅简单的设置一个标志，各个线程执行时主动去轮询这个标志，发现标志为真时，就自己中断挂起。</li>
</ul>


<h4>安全区域</h4>

<blockquote><p>指在一段大妈片段中，引用关系不会发生变化，在这个区域中的任意地方开始GC都是安全的，也可以把安全区域看作是被扩展了的安全点。</p></blockquote>

<h3>垃圾收集器</h3>

<h4>Serial收集器</h4>

<ul>
<li>“Stop The World”:由虚拟机在后台自动发起和自动完成的，在用户不可见的情况下把用户正常工作的线程全部停掉，这对很多应用来说都是难以接受的。</li>
<li>Serial是虚拟机运行在Client模式下的默认新生代收集器，<strong>简单而高效</strong>（与其他收集器的单线程比），对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。</li>
</ul>


<h4>ParNew收集器</h4>

<blockquote><p>ParNew收集器其实就是Serial收集器的多线程版本。</p></blockquote>

<ul>
<li>是许多运行在Server模式下的虚拟机中首选的新生代收集器，目前只有它能与CMS收集器配合工作。</li>
<li>ParNew收集器在单CPU的环境中绝对不会有比Serial收集器更好的效果</li>
</ul>


<h4>Parallel Scavenge收集器</h4>

<blockquote><p>CMS等收集器的关注点是尽可能地缩短垃圾收集时用户线程的停顿时间，而Parallel Scavenge收集器的目标则是达到一个可控制的吞吐量（Throughput），Parallel Scavenge收集器也经常称为“吞吐量优先”收集器
吞吐量=运行用户代码时间/(运行用户代码时间+垃圾收集时间)，虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%.</p></blockquote>

<ul>
<li>主要适合在后台运算而不需要太多交互的任务。</li>
<li>控制最大垃圾收集停顿时间 -XX:MaxGCPauseMillis</li>
<li>直接设置吞吐量大小 -XX:GCTimeRatio</li>
<li>虚拟机根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量，开启GC自适应调解策略 -XX:+UseAdptiveSizePolicy</li>
</ul>


<h4>Serial Old收集器</h4>

<blockquote><p>Serial收集器的老年代版本</p></blockquote>

<h4>Parallel Old收集器</h4>

<blockquote><p>Parallel收集器的老年代版本</p></blockquote>

<h4>CMS收集器</h4>

<blockquote><p>CMS(Concurrent Mark Sweep)收集器是一种以获取最短回收停顿时间为目标的收集器。</p></blockquote>

<ul>
<li>优点：并发收集、低停顿。</li>
<li>缺点：

<ul>
<li>对CPU资源敏感，在并发阶段会因为占用了一部分线程而导致应用程序变慢，总吞吐量会降低，CMS默认启动的回收线程数是(CPU数量+3)/4</li>
<li>无法处理浮动垃圾(Floating Garbage)</li>
<li>“标记-清除”算法收集结束时会有大量空间碎片产生，参数-XX:CMSFullGCsBeforeCompaction，用于设置执行多少次不压缩的Full GC后，跟着来一次带压缩的(默认值为0，表示每次进入Full GC时都进行碎片整理)</li>
</ul>
</li>
</ul>


<h4>G1收集器</h4>

<blockquote><p>一款面向服务端应用的垃圾收集器</p></blockquote>

<p>从JDK6u14中开始就有Early Access版本的G1收集器供开发人员实验、试用。
与其他收集器相比，G1具有如下特点：</p>

<ol>
<li>并行与并发</li>
<li>分代收集</li>
<li>空间整合</li>
<li>可预测的停顿</li>
</ol>


<p>G1收集器的运作大致可划分为以下几个步骤：</p>

<ol>
<li>初始标记（initial Marking）</li>
<li>并发标记（Concurrent Marking）</li>
<li>最终标记（Final Marking）</li>
<li>筛选回收（Live Data Counting and Evacuation）</li>
</ol>


<h4>理解GC日志</h4>

<p><code>
0.202: [Full GC (System) 0.202: [CMS: 0K-&gt;330K(63872K), 0.0153362 secs] 5462K-&gt;330K(83008K), [CMS Perm : 4629K-&gt;4628K(21248K)], 0.0156160 secs] [Times: user=0.02 sys=0.01, real=0.01 secs]
Heap
 par new generation   total 19136K, used 1021K [7f3000000, 7f44c0000, 7f44c0000)
  eden space 17024K,   6% used [7f3000000, 7f30ff6a0, 7f40a0000)
  from space 2112K,   0% used [7f40a0000, 7f40a0000, 7f42b0000)
  to   space 2112K,   0% used [7f42b0000, 7f42b0000, 7f44c0000)
 concurrent mark-sweep generation total 63872K, used 330K [7f44c0000, 7f8320000, 7fae00000)
 concurrent-mark-sweep perm gen total 21248K, used 4689K [7fae00000, 7fc2c0000, 800000000)
</code>
* 最前面的数字<code>0.202</code>代表GC发生的时间，是从Java虚拟机启动以来经过的秒数
* <code>Full GC</code>说明了这次垃圾收集的停顿类型，有<code>Full</code>说明发生了<code>Stop-The-World</code>，如果是调用<code>system.gc()</code>方法所触发的收集，将显示<code>(System)</code>
* <code>CMS Perm</code>表示GC发生的区域，名称是由收集器决定的。
* <code>4629K-&gt;4628K(21248K)</code>含义是**GC前该内存区域已使用容量->GC后该内存区域使用容量（该内存区域总容量）
* <code>0.0156160 secs</code>表示该内存区域GC所占用的时间，单位是秒，当系统有多CPU或者多核的话，多线程操作会叠加这些CPU时间，所以看到user或者sys时间超过real时间是完全正确的。</p>

<h3>内存分配与回收策略</h3>

<ul>
<li>自动内存管理：给对象分配内存以及回收分配给对象的内存。</li>
<li>对象主要分配在新生代的Eden区上，如果启动了本地线程分配缓冲，将按线程优先在TLAB上分配。少数情况下也可能会直接分配在老年代中，分配的规则并不是百分之百固定的，其细节取决于当前使用的是哪一种垃圾收集器组合，还有虚拟机中与内存相关的参数的设置。</li>
</ul>


<h4>对象优先在Eden分配</h4>

<blockquote><p>当Eden区没有足够空间进行分配时,虚拟机将发起一次Minor GC（新生代GC）
Major GC(老年代GC)的速度一般会比MinorGC慢10倍以上</p></blockquote>

<h4>大对象直接进入老年代</h4>

<ul>
<li>-XX:PretenureSizeThreshold,令大于这个设置值的对象直接在老年代分配。<strong>只对Serial和ParNew两款收集器有效</strong></li>
</ul>


<h4>长期存活的对象将进入老年代</h4>

<blockquote><p>虚拟机给每个对象定义了一个对象年龄（Age）计数器。如果对象在Eden出生并经过第一次Minor GC后仍然存活，并且能被Survivor容纳的话，将被移动到Survivor空间中，并且对象年龄设为1.</p>

<p>对象每熬过一次Minor GC，年龄就增加一岁，当它的年龄增加到一定程度（默认为15岁），就将会被晋升到老年代中。</p>

<p>对象晋升老年代的年龄阀值，可以通过参数-XX:MaxTenuringThreshold设置。</p></blockquote>

<h4>动态 对象年龄 判定</h4>

<blockquote><p>如果在Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第2章 Java内存区域与内存溢出异常]]></title>
    <link href="https://sargeraswang.com/blog/2014/01/28/javanei-cun-qu-yu-yu-nei-cun-yi-chu-yi-chang/"/>
    <updated>2014-01-28T14:31:00+08:00</updated>
    <id>https://sargeraswang.com/blog/2014/01/28/javanei-cun-qu-yu-yu-nei-cun-yi-chu-yi-chang</id>
    <content type="html"><![CDATA[<blockquote><p>最近在学习周志明的《深入理解Java虚拟机》，写下学习笔记。<br/>
<a href="http://item.jd.com/11252778.html"><img src="" alt="" /></a></p></blockquote>

<h1>运行时数据区</h1>

<ol>
<li>线程共享

<ol>
<li>方法区（Method Area）</li>
<li>（Java）堆（Heap）</li>
</ol>
</li>
<li>线程私有

<ol>
<li>虚拟机栈（VM Stack）</li>
<li>本地方法栈（Native Method Stack）</li>
<li>程序计数器（Program Counter Register）</li>
</ol>


<p><!-- more --></p>

<h3>方法区</h3></li>
<li>方法区用于储存已被虚拟机加载的类信息、常量、静态变量、及时编译器编译后的代码等数据</li>
<li>虽然《规范》中方法区为堆的一个逻辑部分，但它却有一个别名叫做Non-Heap（非堆），目的应该是与Java堆区分开来。</li>
<li>当方法区无法满足内存分配需求时->OutOfMemoryError</li>
</ol>


<h4>运行时常量池（Runtime Constant Pool）</h4>

<ul>
<li>运行时常量池用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放</li>
<li>既然运行时常量池是方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时->OutOfMemoryError</li>
</ul>


<h3>Java堆</h3>

<ul>
<li>Java堆的唯一目的就是存放对象实例。</li>
<li>栈上分配、标量替换优化技术将会导致一些微妙的变化发生，所有的对象都分配在堆上也渐渐变得不是那么“绝对”了。</li>
<li>Java堆是垃圾收集器管理的主要区域，因此很多时候也被称为“GC堆”（Grabage Collected Heap）</li>
<li>如果在堆中没有内存完成实例分配，并且堆也无法再扩展时->OutOfMemoryError</li>
</ul>


<h3>虚拟机栈</h3>

<ul>
<li>虚拟机栈的生命周期与线程相同。</li>
<li>每个方法在执行的同时都会创建一个栈帧（方法运行时的基础数据结构）用于储存

<ol>
<li>局部变量表</li>
<li>操作数栈</li>
<li>动态链接</li>
<li>方法出口<br/>
等信息</li>
</ol>
</li>
<li>通常，Java栈内存和堆内存，中的“栈”说的就是虚拟机栈，或者虚拟机栈中的局部变量表部分</li>
<li>局部变量表存放了编译期间可知的

<ol>
<li>各种基本数据类型（其中64位长度的long和double类型的数据会占用2个局部变量空间，其余数据类型只占用一个）</li>
<li>对象引用类型

<ol>
<li>指向对象起始地址的引用指针</li>
<li>指向一个代表对象的句柄或其他与此对象相关的位置</li>
</ol>
</li>
<li>returnAddress类型（指向了一条字节码指令的地址）</li>
</ol>
</li>
<li>局部变量表所需的内存空间在编译期间完成分配。</li>
<li>在Java虚拟机规范中，对虚拟机栈规定了两种异常状况：

<ol>
<li>线程请求的栈深度大于虚拟机所允许的深度->StackOverflowError</li>
<li>扩展时无法申请到足够的内存->OutOfMemoryError</li>
</ol>
</li>
</ul>


<h3>本地方法栈</h3>

<ul>
<li><strong>本地方法栈</strong>与<strong>虚拟机栈</strong>的区别：

<ul>
<li>虚拟机栈为虚拟机执行Java方法（也就是字节码）服务</li>
<li>本地方法栈为虚拟机使用到的Native方法服务</li>
</ul>
</li>
<li>与<strong>虚拟机栈</strong>一样，->StackOverflowError &amp; OutOfMemoryError</li>
</ul>


<h3>程序计数器</h3>

<ul>
<li>程序计数器可以看做是当前线程所执行的字节码的行号指示器。</li>
<li>Java虚拟机的多线程是通过<strong>线程轮流切换</strong>并<strong>分配处理器执行时间</strong>的方式来实现的。</li>
<li>程序计数器是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</li>
</ul>


<h3>直接内存（Direct Memory）</h3>

<ul>
<li>直接内存并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域。</li>
<li>JDK1.4加入了NIO（New Input/Output），引入了基于通道与缓冲区的I/O方式，可以使用Native函数库直接分配堆外内存。</li>
<li>在配置虚拟机参数时，经常会忽略直接内存，使得各个内存区域总和大于物理内存限制（包括物理的和操作系统级的限制），从而导致动态扩展时->OutOfMemoryError</li>
</ul>


<h1>HotSpot虚拟机对象探秘</h1>

<h3>对象的创建</h3>

<ul>
<li>划分内存：

<ul>
<li>堆中内存绝对规整：指针碰撞（切蛋糕）</li>
<li>堆中内存并不规整：空闲列表（有列表记录哪里可用）</li>
</ul>
</li>
<li>并发情况下划分内存的解决方案：

<ul>
<li>对分配内存空间的动作进行同步处理，实际上虚拟机采用CAS配上失败重试的方式保证更新操作的原子性</li>
<li>把内存分配动作按照线程划分在不同的空间之中进行，每个线程在Java堆中预先分配一小块内存，称为<strong>本地线程分配缓冲</strong>（Thred Local Allocation Buffer,TLAB）</li>
</ul>
</li>
</ul>


<h3>对象的内存布局</h3>

<ul>
<li>在HotSpot虚拟机中，对象在内存中存储的布局可以分为3块区域：对象头（Header）、实例数据（Instance Data）和对齐填充（Padding）。</li>
<li>对象头：

<ul>
<li>用于存储对象自身的运行时数据。</li>
<li>类型指针，即对象指向它的类元数据的指针</li>
<li>如果对象是一个Java数组，在对象头中还必须有一块用于记录数组长度的数据。</li>
</ul>
</li>
<li>实例数据室对象真正存储的有效信息，也是程序代码中所定义的各种类型的字段内容</li>
<li>对齐填充并不是必然存在的，也没有特别的含义，起着<strong>占位符</strong>的作用，因为HotSpot要求对象起始位置必须是8字节的整倍数。</li>
</ul>


<h3>对象的访问定位</h3>

<ul>
<li>主流的访问方式

<ul>
<li>使用句柄：reference->实例数据指针->实例数据
                 &ndash;>类型数据指针->类型数据</li>
<li>直接指针：reference->实例数据（包含类型数据指针）
                               类型数据指针->类型数据</li>
</ul>
</li>
<li>使用句柄来访问的最大好处是reference中存储的是稳定的句柄地址，在对象被移动时只会改变句柄中的实例数据指针，而reference本身不需要修改</li>
<li>使用直接指针最大好处就是速度更快，节省了一次指针定位的时间开销，HotSpot使用直接指针方式进行对象访问</li>
</ul>


<h1>实战：OutOfMemoryError异常</h1>

<ul>
<li>将堆的最小值-Xms参数与最大值-Xmx参数设置为一样即可避免堆自动扩展</li>
<li>通过参数-XX:+HeapDumpOnOutOfMemoryError可以让虚拟机在出现内存溢出异常时Dump出当前的内存堆转储快照以便事后进行分析</li>
</ul>


<h3>Java堆溢出</h3>

<p>``` java
/<em>*
 * VM Args: -Xms27M -Xmx27M -XX:+HeapDumpOnOutOfMemoryError
 </em>/
public class HeapOOM {</p>

<pre><code>static class OOMObject {

}

public static void main(String[] args) {
    List&lt;OOMObject&gt; list = new ArrayList&lt;HeapOOM.OOMObject&gt;();
    while (true) {
        list.add(new OOMObject());
    }
}
</code></pre>

<p>}
<code>
运行结果
</code>
java.lang.OutOfMemoryError: Java heap space
Dumping heap to java_pid1089.hprof &hellip;
Heap dump file created [34195387 bytes in 0.288 secs]
<code>``
其中</code>Java heap space`说明是Java堆内存溢出</p>

<ul>
<li>内存泄露：进一步查看泄露对象与GC Roots的引用链</li>
<li>内存溢出：

<ul>
<li>检查虚拟机的堆参数（Xmx Xms）与机器物理内存对比看是否还可以调大</li>
<li>从代码上检查是否存在某些对象生命周期过长、持有状态时间过长的情况尝试减少程序运行期的内存消耗</li>
</ul>
</li>
</ul>


<h3>虚拟机栈和本地方法栈溢出</h3>

<p>``` java
/<em>*
 * VM Args: -Xss128k
 </em>/
public class JavaVMStackSOF {</p>

<pre><code>private int stackLength = 1;

public void stackLeak() {
    stackLength++;
    stackLeak();
}

public static void main(String[] args) throws Throwable {
    JavaVMStackSOF sof = new JavaVMStackSOF();
    try {
        sof.stackLeak();
    } catch (Throwable e) {
        System.out.println("stack length:" + sof.stackLength);
        throw e;
    }
}
</code></pre>

<p>}
<code>
运行结果
</code>
stack length:401
Exception in thread &ldquo;main&rdquo; java.lang.StackOverflowError</p>

<pre><code>at io.github.sageraswang.test.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:14)
at io.github.sageraswang.test.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:15)
...
</code></pre>

<p>```
* 创建线程导致内存溢出异常，尝试失败，系统总是假死。</p>

<h3>方法区和运行时常量池溢出</h3>

<p>``` java
/<em>*
 * VM Args: -XX:PermSize=10M -XX:MaxPermSize=10M
 </em>/
public class RuntimeConstantPoolOOM {</p>

<pre><code>public static void main(String[] args) {
    List&lt;String&gt; list = new ArrayList&lt;String&gt;();
    int i = 0;
    while (true) {
        list.add(String.valueOf(i++).intern());
    }
}
</code></pre>

<p>}
<code>
运行结果
</code>
Exception in thread &ldquo;main&rdquo; java.lang.OutOfMemoryError: PermGen space</p>

<pre><code>at java.lang.String.intern(Native Method)
at io.github.sageraswang.test.RuntimeConstantPoolOOM.main(RuntimeConstantPoolOOM.java:18)
</code></pre>

<p><code>``
其中</code>PermGen space`说明运行时常量池属于方法区（HotSpot虚拟机中的永久代）的一部分</p>

<h4>String.Intern()返回引用的测试</h4>

<p>``` java
public class RuntimeConstantPoolOOM2 {</p>

<pre><code>public static void main(String[] args) {
    String str1 = new StringBuilder("计算机").append("软件").toString();
    System.out.println(str1.intern() == str1);

    String str2 = new StringBuilder("ja").append("va").toString();
    System.out.println(str2.intern() == str2);
}
</code></pre>

<p>}
```</p>

<blockquote><p>JDK1.6执行结果为两个<code>false</code>,JDK1.7中执行结果为一个<code>true</code>一个<code>false</code>.
因为在JDK1.6中，intern()方法会把首次遇到的字符串实例复制到永久代中，返回的也是这个字符串实例的引用，而由StringBuilder创建的字符串实例在Java堆上，所以必然不是同一个引用</p>

<p>而在JDK1.7中的intern()实现不会再复制实例，只是在常量池中记录首次出现的实例引用，因此intern()返回的引用和StringBuilder创建的那个字符串实例是同一个。对<code>str2</code>比较返回<code>false</code>是因为“java”这个字符串在执行<code>StringBuilder.toString()</code>之前已经出现过，字符串常量中已经出现它的引用了，不符合首次出现的原则。</p></blockquote>

<h4>借助CGLib使方法区出现内存溢出异常</h4>

<p>``` java
/<em>*
 * VM Args: -XX:PermSize=10M -XX:MaxPermSize=10M
 </em>/
public class JavaMethodAreaOOM {</p>

<pre><code>public static void main(String[] args) {
    while (true) {
        Enhancer enhancer = new Enhancer();
        enhancer.setSuperclass(OOMObject.class);
        enhancer.setUseCache(false);
        enhancer.setCallback(new MethodInterceptor() {

            @Override
            public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy)
                    throws Throwable {
                return proxy.invoke(obj, args);
            }
        });
        enhancer.create();
    }
}

static class OOMObject {
}
</code></pre>

<p>}
<code>
运行结果：
</code>
Exception in thread &ldquo;main&rdquo; net.sf.cglib.core.CodeGenerationException: java.lang.reflect.InvocationTargetException&mdash;>null</p>

<pre><code>at net.sf.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:237)
at net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:377)
at net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285)
at io.github.sageraswang.test.JavaMethodAreaOOM.main(JavaMethodAreaOOM.java:29)
</code></pre>

<p>Caused by: java.lang.reflect.InvocationTargetException</p>

<pre><code>at sun.reflect.GeneratedMethodAccessor1.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at net.sf.cglib.core.ReflectUtils.defineClass(ReflectUtils.java:384)
at net.sf.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:219)
... 3 more
</code></pre>

<p>Caused by: java.lang.OutOfMemoryError: PermGen space</p>

<pre><code>at java.lang.ClassLoader.defineClass1(Native Method)
at java.lang.ClassLoader.defineClassCond(ClassLoader.java:637)
at java.lang.ClassLoader.defineClass(ClassLoader.java:621)
... 8 more
</code></pre>

<p>```</p>

<blockquote><p><strong>在经常动态生成大量Class的应用中，需要特别注意类的回收状况</strong></p></blockquote>

<h3>本机直接内存溢出</h3>

<p>``` java
import sun.misc.Unsafe;</p>

<p>/<em>*
 * VM Args: -Xmx20M -XX:MaxDirectMemorySize=10M
 </em>/
public class DirectMemoryOOM {</p>

<pre><code>private static final int _1MB = 1024 * 1024;

public static void main(String[] args) throws Exception {
    Field unsafeField = Unsafe.class.getDeclaredFields()[0];
    unsafeField.setAccessible(true);
    Unsafe unsafe = (Unsafe) unsafeField.get(null);
    while (true) {
        unsafe.allocateMemory(_1MB);
    }
}
</code></pre>

<p>}
```
<font color='red'>运行10分钟，没有出现异常，待解决。</font></p>

<blockquote><p>由DirectMemory导致的内存溢出，Heap Dump 文件没有明显的异常</p></blockquote>
]]></content>
  </entry>
  
</feed>
