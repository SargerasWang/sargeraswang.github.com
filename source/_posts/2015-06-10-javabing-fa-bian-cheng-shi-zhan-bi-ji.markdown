---
layout: post
title: "Java并发编程实战笔记"
date: 2015-06-10 19:29
comments: true
categories: 
images: []

---

* 完全由线程安全的类构成的程序并不一定是线程安全的;一个线程安全的程序中也可以包含非线程安全的类.
* 线程安全类的定义:一个在多个线程访问时能表现出正确的行为的类.
>当多个线程访问某个类时,不管运行环境采用何种调度方式或者这些线程将如何交替执行,并且在主调代码中不需要任何额外的同步或协同,这个类都能表现出正确的行为,那么就称这个类是线程安全的.
* 无状态对象一定是线程安全的.
* 当在无状态的类中添加一个状态时,如果该状态完全由线程安全的对象来管理,那么这个类仍然是线程安全的.
* 竞态条件:在并发编程中,由于不恰当的执行时序而出现不正确的结果.
* 数据竞争:如果在访问的非final类型的域时没有采用同步来进行协同,就会出现数据竞争.
* 在java.util.concurrent.atomic包中包含了一些原子变量类,用于实现在数值和对象引用上的原子状态转换.
* 要保证状态的一致性,就需要在单个原子操作中更新所有相关的状态变量.
* 重入:获取锁的操作粒度是"线程",而不是"调用".
* 
