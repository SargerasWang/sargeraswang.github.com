<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[SargerasWang's Blog]]></title>
  <link href="http://sargeraswang.com/atom.xml" rel="self"/>
  <link href="http://sargeraswang.com/"/>
  <updated>2018-11-06T18:26:26+08:00</updated>
  <id>http://sargeraswang.com/</id>
  <author>
    <name><![CDATA[SargerasWang]]></name>
    <email><![CDATA[sargeraswang@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[generatePrivate Exception 解决]]></title>
    <link href="http://sargeraswang.com/blog/2018/11/06/generateprivate-exception-jie-jue/"/>
    <updated>2018-11-06T18:11:00+08:00</updated>
    <id>http://sargeraswang.com/blog/2018/11/06/generateprivate-exception-jie-jue</id>
    <content type="html"><![CDATA[<blockquote><p>java.security.spec.InvalidKeySpecException: java.security.InvalidKeyException: invalid key format 异常解决</p></blockquote>

<p>私钥是直接生成的<code>pkcs8</code>格式,类似如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAL21hi3tyVA2ILrk
</span><span class='line'>...
</span><span class='line'>+bojB4QWBQi9zg==</span></code></pre></td></tr></table></div></figure>


<p>直接在代码中使用<code>String</code>存储,利用类似如下代码进行签名:</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">PKCS8EncodedKeySpec</span> <span class="n">priPKCS8</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PKCS8EncodedKeySpec</span><span class="o">(</span><span class="n">prikeyvalue</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>
</span><span class='line'><span class="n">KeyFactory</span> <span class="n">keyf</span> <span class="o">=</span> <span class="n">KeyFactory</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">&quot;RSA&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">PrivateKey</span> <span class="n">myprikey</span> <span class="o">=</span> <span class="n">keyf</span><span class="o">.</span><span class="na">generatePrivate</span><span class="o">(</span><span class="n">priPKCS8</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中第三行报错,如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">java</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">spec</span><span class="o">.</span><span class="na">InvalidKeySpecException</span><span class="o">:</span> <span class="n">java</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">InvalidKeyException</span><span class="o">:</span> <span class="n">invalid</span> <span class="n">key</span> <span class="n">format</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">rsa</span><span class="o">.</span><span class="na">RSAKeyFactory</span><span class="o">.</span><span class="na">engineGeneratePrivate</span><span class="o">(</span><span class="n">RSAKeyFactory</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">217</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">KeyFactory</span><span class="o">.</span><span class="na">generatePrivate</span><span class="o">(</span><span class="n">KeyFactory</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">372</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="o">...</span>
</span><span class='line'><span class="n">Caused</span> <span class="nl">by:</span> <span class="n">java</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">InvalidKeyException</span><span class="o">:</span> <span class="n">invalid</span> <span class="n">key</span> <span class="n">format</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">pkcs</span><span class="o">.</span><span class="na">PKCS8Key</span><span class="o">.</span><span class="na">decode</span><span class="o">(</span><span class="n">PKCS8Key</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">330</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">pkcs</span><span class="o">.</span><span class="na">PKCS8Key</span><span class="o">.</span><span class="na">decode</span><span class="o">(</span><span class="n">PKCS8Key</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">356</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">rsa</span><span class="o">.</span><span class="na">RSAPrivateCrtKeyImpl</span><span class="o">.&lt;</span><span class="n">init</span><span class="o">&gt;(</span><span class="n">RSAPrivateCrtKeyImpl</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">91</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">rsa</span><span class="o">.</span><span class="na">RSAPrivateCrtKeyImpl</span><span class="o">.</span><span class="na">newKey</span><span class="o">(</span><span class="n">RSAPrivateCrtKeyImpl</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">75</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">rsa</span><span class="o">.</span><span class="na">RSAKeyFactory</span><span class="o">.</span><span class="na">generatePrivate</span><span class="o">(</span><span class="n">RSAKeyFactory</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">316</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">rsa</span><span class="o">.</span><span class="na">RSAKeyFactory</span><span class="o">.</span><span class="na">engineGeneratePrivate</span><span class="o">(</span><span class="n">RSAKeyFactory</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">213</span><span class="o">)</span>
</span><span class='line'>  <span class="o">...</span> <span class="mi">77</span> <span class="n">more</span>
</span></code></pre></td></tr></table></div></figure>


<p>解决方式,秘钥<code>String</code>要先经过<code>Base64 Decode</code>,如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">PKCS8EncodedKeySpec</span> <span class="n">priPKCS8</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PKCS8EncodedKeySpec</span><span class="o">(</span><span class="n">prikeyvalue</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>
</span><span class='line'><span class="c1">//改成如下</span>
</span><span class='line'><span class="n">PKCS8EncodedKeySpec</span> <span class="n">priPKCS8</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PKCS8EncodedKeySpec</span><span class="o">(</span><span class="k">new</span> <span class="n">Base64</span><span class="o">().</span><span class="na">decode</span><span class="o">(</span><span class="n">prikeyvalue</span><span class="o">.</span><span class="na">getBytes</span><span class="o">()));</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的<code>Base64</code>类是指<code>org.apache.commons.codec.binary.Base64</code>.</p>

<p>问题解决</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacOS Mojave 重新安装mysql步骤及连接问题处理]]></title>
    <link href="http://sargeraswang.com/blog/2018/11/03/macos-mojave-zhong-xin-an-zhuang-mysqlbu-zou-ji-lian-jie-wen-ti-chu-li/"/>
    <updated>2018-11-03T15:35:00+08:00</updated>
    <id>http://sargeraswang.com/blog/2018/11/03/macos-mojave-zhong-xin-an-zhuang-mysqlbu-zou-ji-lian-jie-wen-ti-chu-li</id>
    <content type="html"><![CDATA[<h3>卸载并清理原有mysql</h3>

<p>1.数据备份,具体请查看<a href="https://www.jianshu.com/p/0a82d115d54d">mysqldump 的使用</a>,如果不需要备份,直接到下一步</p>

<!-- more -->


<p>2.查看当前系统是否有<code>mysql</code>进程:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ps -ax|grep mysql
</span></code></pre></td></tr></table></div></figure>


<p>3.如果有,<code>kill</code>掉</p>

<p>4.使用<code>HomeBrew</code>删除</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>brew remove mysql
</span><span class='line'>brew cleanup
</span></code></pre></td></tr></table></div></figure>


<p>5.删除文件:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo rm /usr/local/mysql
</span><span class='line'>sudo rm -rf /usr/local/var/mysql
</span><span class='line'>sudo rm -rf /usr/local/mysql*
</span><span class='line'>sudo rm ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist
</span><span class='line'>sudo rm -rf /Library/StartupItems/MySQLCOM
</span><span class='line'>sudo rm -rf /Library/PreferencePanes/My*
</span></code></pre></td></tr></table></div></figure>


<p>6.取消MySQL自动启动:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist
</span></code></pre></td></tr></table></div></figure>


<p>7.删除MySQL的设置:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>subl /etc/hostconfig
</span><span class='line'><span class="c"># 删除这一行 MYSQLCOM=-YES-</span>
</span></code></pre></td></tr></table></div></figure>


<p>8.删除MySQL的首选项:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rm -rf ~/Library/PreferencePanes/My*
</span><span class='line'>sudo rm -rf /Library/Receipts/mysql*
</span><span class='line'>sudo rm -rf /Library/Receipts/MySQL*
</span><span class='line'>sudo rm -rf /private/var/db/receipts/*mysql*
</span></code></pre></td></tr></table></div></figure>


<p>9.重新启动Mac</p>

<h3>下载并安装新mysql</h3>

<p>1.<a href="https://www.mysql.com/cn/">MySQL官网</a> &ndash;> 下载 &ndash;> 选择最下面的社区版本(MySQL Community Edition) &ndash;> 点第一个 MySQL Community Server (GPL) &ndash;> 选择DMG安装下载 (
macOS 10.14 (x86, 64-bit), DMG Archive)</p>

<blockquote><p>最终的下载地址是 <a href="https://dev.mysql.com/downloads/file/?id=480768">https://dev.mysql.com/downloads/file/?id=480768</a></p></blockquote>

<p>2.打开DMG,运行安装包,通常都是选择下一步,有一部会问你是使用8.0新版的更强健的安全的方式,还是兼容5.0,我们选择下面的兼容5.0</p>

<p>3.提示输入root密码两次,要记住这里的密码哦</p>

<p>4.安装完成</p>

<p>5.安装程序默认不会添加mysql命令到终端,所以需要自己配置:</p>

<ol>
<li>打开<code>/.bash_profile</code>文件</li>
<li>添加一行 <code>export PATH=$PATH:/usr/local/mysql/bin</code></li>
<li>保存</li>
<li>执行 <code>source ~/.bash_profile</code></li>
</ol>


<p>6.尝试连接mysql服务,运行 <code>mysql -uroot -p</code>回车</p>

<p>7.输入安装时设置的root密码</p>

<p>8.连接成功,并且控制台会打印出mysql版本 <code>Server version: 8.0.13 MySQL Community Server - GPL</code></p>

<h3>尝试使用数据库工具连接</h3>

<ol>
<li>使用 DbVisualizer 添加新的 connection</li>
<li>像往常一样 <code>Driver</code>选择了<code>MySQL</code></li>
<li>点击<code>Ping Server</code> 提示正常</li>
<li>点击<code>Connect</code>则无法连接显示如下:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>An error occurred <span class="k">while </span>establishing the connection:
</span><span class='line'>
</span><span class='line'>Long Message:
</span><span class='line'>Could not create connection to database server.
</span><span class='line'>
</span><span class='line'>Details:
</span><span class='line'>   Type: com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException
</span><span class='line'>   SQL State: 08001
</span></code></pre></td></tr></table></div></figure>


<h3>解决办法</h3>

<p>1.原因是新安装的MySQL服务版本过高,老版本jdbc驱动无法连接.</p>

<p>2.解决方式当然有两个:A.退回低版本服务;B.使用高版本驱动</p>

<p>3.我们尝试使用新版本驱动,在选择<code>Driver</code>处,下来选择<code>MySQL(DataDirect)</code>这一项,会弹出让你选择文件</p>

<p>4.去下载最新的驱动文件,例如这里:<a href="http://central.maven.org/maven2/mysql/mysql-connector-java/8.0.13/mysql-connector-java-8.0.13.jar">http://central.maven.org/maven2/mysql/mysql-connector-java/8.0.13/mysql-connector-java-8.0.13.jar</a></p>

<p>5.<code>Driver</code>选择刚才下载的这个jar文件,再次尝试<code>Connect</code></p>

<p>6.提示错误信息如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>An error occurred <span class="k">while </span>establishing the connection:
</span><span class='line'>The selected Driver cannot handle the specified Database URL.
</span><span class='line'>The most common reason <span class="k">for </span>this error is that the database URL
</span><span class='line'>contains a syntax error preventing the driver from accepting it.
</span><span class='line'>The error also occurs when trying to connect to a database
</span><span class='line'>with the wrong driver. Correct this and try again.
</span></code></pre></td></tr></table></div></figure>


<p>7.在<code>Settings Format</code>处,选择<code>Database URL</code></p>

<p>8.<code>Database URL</code>填入<code>jdbc:mysql://localhost:3306</code></p>

<p>9.再次尝试<code>Connect</code>,成功!</p>

<p>截图如下:</p>

<p><img src="http://sargeraswang.com/images/blog_img/mysql/success.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[发布Jar到Maven中央仓库遇到的问题笔记]]></title>
    <link href="http://sargeraswang.com/blog/2017/10/25/bu-jardao-mavenzhong-yang-cang-ku-yu-dao-de-wen-ti-bi-ji/"/>
    <updated>2017-10-25T20:52:00+08:00</updated>
    <id>http://sargeraswang.com/blog/2017/10/25/bu-jardao-mavenzhong-yang-cang-ku-yu-dao-de-wen-ti-bi-ji</id>
    <content type="html"><![CDATA[<p>本来在github上有开源一个java的Excel导入导出工具包(<a href="https://github.com/SargerasWang/ExcelUtil">ExcelUtil</a>)</p>

<p>最近在处理bug的时候,看到有位朋友<a href="https://github.com/SargerasWang/ExcelUtil/issues/11">希望作者能把构件上传至Maven中央库中</a>,想来为了方便大家,就按照他博客文章<a href="http://www.arccode.net/publish-artifact-to-maven-central-repository.html">发布构件至Maven中央库</a>中的步骤去做,期间遇到一些问题,在这里记录.</p>

<!-- more -->


<h3>GPG安装</h3>

<p>目前直接安装最新的是<code>gpg2</code>所以,执行任何命令都应该是<code>gpg2</code>开头</p>

<h3>将公钥发布到 PGP 密钥服务器</h3>

<p>执行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gpg --keyserver hkp://pool.sks-keyservers.net --send-keys </span></code></pre></td></tr></table></div></figure>


<p>会有报错</p>

<p><code>gpg: keyserver send failed: No route to host</code></p>

<p>修改为,网络上提供的</p>

<p><code>hkp://ipv4.pool.sks-keyservers.net:80</code></p>

<p>则会有错误</p>

<p><code>gpg: keyserver send failed: End of file</code></p>

<p>或</p>

<p><code>gpg: keyserver send failed: No name</code></p>

<p>最终,还是在官网查到了可用的地址:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hkp://p80.pool.sks-keyservers.net:80</span></code></pre></td></tr></table></div></figure>


<p><strong>查询公钥是否发布成功 同理使用这个url</strong></p>

<h3>上传构件至OSS中</h3>

<p>由于gpg的maven插件,默认使用<code>gpg</code>命令,所以执行<code>mvn clean deploy</code>会有如下错误:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ERROR] Failed to execute goal org.apache.maven.plugins:maven-gpg-plugin:1.6:sign (default) on project excel-util: Unable to execute gpg command: Error while executing process. Cannot run program "gpg": error=2, No such file or directory -&gt; [Help 1]
</span></code></pre></td></tr></table></div></figure>


<p>应在<code>pom.xml</code>中增加设置,<code>&lt;properties&gt;</code>中增加<code>&lt;gpg.executable&gt;gpg2&lt;/gpg.executable&gt;</code></p>

<p>以上是遇到的所有问题.</p>

<p>在release完成后,客服答复是这样的:</p>

<blockquote><p>Central sync is activated for com.sargeraswang. After you successfully release, your component will be published to Central, typically within 10 minutes, though updates to search.maven.org can take up to two hours.</p></blockquote>

<p>大概意思是,10分钟内会被发布到中央仓库,两小时内会更新到<code>search.maven.org</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SseEmitter DefaultHandlerExceptionResolver : Async timeout for GET 解决]]></title>
    <link href="http://sargeraswang.com/blog/2017/04/20/sseemitter-defaulthandlerexceptionresolver-async-timeout-for-get-jie-jue/"/>
    <updated>2017-04-20T15:05:00+08:00</updated>
    <id>http://sargeraswang.com/blog/2017/04/20/sseemitter-defaulthandlerexceptionresolver-async-timeout-for-get-jie-jue</id>
    <content type="html"><![CDATA[<p>使用<code>SpringMVC</code>搭配HTML5的<code>EventSource</code>之<code>SseEmitter</code>如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&quot;connect&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="n">SseEmitter</span> <span class="nf">connect</span><span class="o">(){</span>
</span><span class='line'>    <span class="n">SseEmitter</span> <span class="n">emitter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SseEmitter</span><span class="o">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">emitter</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样会抛出如下异常:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">DefaultHandlerExceptionResolver</span> <span class="o">:</span> <span class="n">Async</span> <span class="n">timeout</span> <span class="k">for</span> <span class="n">GET</span>
</span></code></pre></td></tr></table></div></figure>


<p>原因是请求到timeout时间就会超时,<code>new SseEmitter(long timeout);</code>是可以设置timeout的,单位是毫秒,但是设置为60000L(一分钟),也是一样的,每分钟都会抛出这个异常.</p>

<p>最后解决办法,timeout永不过时,timeout设置为0,如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&quot;connect&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="n">SseEmitter</span> <span class="nf">connect</span><span class="o">(){</span>
</span><span class='line'>    <span class="n">SseEmitter</span> <span class="n">emitter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SseEmitter</span><span class="o">(</span><span class="mi">0L</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">emitter</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>就不会抛出异常了,前端用类似如下代码即可:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">eventSource</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventSource</span><span class="p">(</span><span class="s2">&quot;/sse/connect&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">eventSource</span><span class="p">.</span><span class="nx">onmessage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>    <span class="c1">//event.data 是数据</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">eventSource</span><span class="p">.</span><span class="nx">onerror</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>        <span class="c1">//消息服务异常,无法创建连接</span>
</span><span class='line'>    <span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">==</span> <span class="mi">2</span><span class="p">){</span>
</span><span class='line'>        <span class="c1">//消息服务断开,无法及时收到消息</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[netty org.msgpack.MessageTypeException: Expected array but got not array value]]></title>
    <link href="http://sargeraswang.com/blog/2017/04/19/netty-org-dot-msgpack-dot-messagetypeexception-expected-array-but-got-not-array-value/"/>
    <updated>2017-04-19T17:07:00+08:00</updated>
    <id>http://sargeraswang.com/blog/2017/04/19/netty-org-dot-msgpack-dot-messagetypeexception-expected-array-but-got-not-array-value</id>
    <content type="html"><![CDATA[<p>在使用Netty时,client给server发送消息,突然大量并发请求发送消息,抛出以下异常</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>org.msgpack.MessageTypeException: Expected array but got not array value
</span><span class='line'>    at org.msgpack.unpacker.Converter.readArrayBegin(Converter.java:202) ~[msgpack-0.6.12.jar:na]</span></code></pre></td></tr></table></div></figure>


<p>看起来是<code>msgpack</code>的问题,debug发现如果单步debug,就没有问题,并发时才会出现,google以上内容并没有解决问题.</p>

<p>最后找到原因,是因为没有解决<code>粘包拆包</code>,解决方法如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">socketChannel</span><span class="o">.</span><span class="na">pipeline</span><span class="o">()</span>
</span><span class='line'>        <span class="o">.</span><span class="na">addLast</span><span class="o">(</span><span class="s">&quot;frameDecoder&quot;</span><span class="o">,</span><span class="k">new</span> <span class="n">LengthFieldBasedFrameDecoder</span><span class="o">(</span><span class="mi">1024</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">2</span><span class="o">))</span>  <span class="c1">//</span>
</span><span class='line'>        <span class="o">.</span><span class="na">addLast</span><span class="o">(</span><span class="s">&quot;msgpack decoder&quot;</span><span class="o">,</span><span class="k">new</span> <span class="n">MsgpackDecoder</span><span class="o">())</span>
</span><span class='line'>        <span class="o">.</span><span class="na">addLast</span><span class="o">(</span><span class="s">&quot;frameEncoder&quot;</span><span class="o">,</span><span class="k">new</span> <span class="n">LengthFieldPrepender</span><span class="o">(</span><span class="mi">2</span><span class="o">))</span>  <span class="c1">//</span>
</span><span class='line'>        <span class="o">.</span><span class="na">addLast</span><span class="o">(</span><span class="s">&quot;msgpack encoder&quot;</span><span class="o">,</span><span class="k">new</span> <span class="n">MsgpackEncoder</span><span class="o">())</span>
</span><span class='line'>        <span class="o">.</span><span class="na">addLast</span><span class="o">(</span><span class="n">serverHandler</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>主要是上面的<code>.addLast("msgpack decoder",new MsgpackDecoder())</code>和<code>.addLast("msgpack encoder",new MsgpackEncoder())</code>.</p>

<p>问题解决.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mybatis中association查询与主查询在不同数据库的解决方法]]></title>
    <link href="http://sargeraswang.com/blog/2015/04/10/mybatiszhong-associationcha-xun-yu-zhu-cha-xun-zai-bu-tong-shu-ju-ku-de-jie-jue-fang-fa/"/>
    <updated>2015-04-10T19:44:00+08:00</updated>
    <id>http://sargeraswang.com/blog/2015/04/10/mybatiszhong-associationcha-xun-yu-zhu-cha-xun-zai-bu-tong-shu-ju-ku-de-jie-jue-fang-fa</id>
    <content type="html"><![CDATA[<h2>问题描述</h2>

<p>Mybatis 关联的嵌套查询 官方的例子:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;resultMap</span> <span class="na">id=</span><span class="s">&quot;blogResult&quot;</span> <span class="na">type=</span><span class="s">&quot;Blog&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;association</span> <span class="na">property=</span><span class="s">&quot;author&quot;</span> <span class="na">column=</span><span class="s">&quot;author_id&quot;</span> <span class="na">javaType=</span><span class="s">&quot;Author&quot;</span> <span class="na">select=</span><span class="s">&quot;selectAuthor&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/resultMap&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&quot;selectBlog&quot;</span> <span class="na">resultMap=</span><span class="s">&quot;blogResult&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  SELECT * FROM BLOG WHERE ID = #{id}
</span><span class='line'><span class="nt">&lt;/select&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&quot;selectAuthor&quot;</span> <span class="na">resultType=</span><span class="s">&quot;Author&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  SELECT * FROM AUTHOR WHERE ID = #{id}
</span><span class='line'><span class="nt">&lt;/select&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个时候,如果<code>AUTHOR</code>表与<code>BLOG</code>在两个不同的数据库中,执行会报找不到<code>AUTHOR</code>表.</p>

<h2>解决思路</h2>

<p>新建一个Mybatis的<code>Plugins插件</code>,在第二次查询也就是<code>selectAuthor</code>执行之前,切换数据源为另一个数据库.看一下Plugins都可以用于哪些地方:</p>

<ul>
<li>Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)</li>
<li>ParameterHandler (getParameterObject, setParameters)</li>
<li>ResultSetHandler (handleResultSets, handleOutputParameters)</li>
<li>StatementHandler (prepare, parameterize, batch, update, query)</li>
</ul>


<!-- more -->


<h3>尝试1</h3>

<p>拦截<code>Executor</code>的<code>query</code>方法是最先想到的,毕竟是符合思路的&#8221;执行查询之前&#8221;,有两个<code>query</code>方法:</p>

<ul>
<li><E> List<E> query(MappedStatement var1, Object var2, RowBounds var3, ResultHandler var4, CacheKey var5, BoundSql var6) throws SQLException;</li>
<li><E> List<E> query(MappedStatement var1, Object var2, RowBounds var3, ResultHandler var4) throws SQLException;</li>
</ul>


<p>尝试结果:4个参数的只能拦截到执行主查询,6个参数的什么都拦截不到,暂时放弃</p>

<h3>尝试2</h3>

<p>子查询执行之前既然不行,就尝试在主查询执行完成之后,拦截<code>ResultSetHandler</code>的<code>handleResultSets</code>.</p>

<p>尝试结果:在主查询结束后替换掉了dataSource,子查询也顺利查出,但是有不可扩展的问题:如果主查询需要多个映射查询,分别在不同数据库中,在此处无法得知接下来要执行的是哪一个库的,所以此尝试方案只适用于只有一个子查询的情况,放弃</p>

<h3>尝试3</h3>

<p>开始思考<code>尝试1</code>失败的原因,debug发现子查询确实是执行了<code>query</code>6个参数的方法,但是为什么没有拦截住呢,怀疑是因为JDK的动态代理是基于接口的,而此处的调用是方法内部之间的调用,并没有通过接口,所以拦截失败.那如果使用基于继承的<code>cglib</code>动态代理呢?</p>

<p>尝试结果:还是无法拦截,在类的内部的方法之间的调用,是无法通过动态代理拦截的,具体原因如这篇<a href="http://lgbolgger.iteye.com/blog/2123895">Spring AOP源码分析（八）SpringAOP要注意的地方</a>所说,放弃</p>

<h3>尝试4</h3>

<p>既然执行前和执行后都不行,再尝试一下<code>StatementHandler</code>的<code>query</code>.</p>

<h4>尝试4.1</h4>

<p>对调用者<code>StatementHandler</code>中的<code>delegate.executor.transaction.dataSource</code>和<code>delegate.executor.transaction.connection</code>替换.结果数据库并没有切换,放弃</p>

<h4>尝试4.2</h4>

<p>对方法参数<code>Statement</code>中的<code>inner.connection</code>和<code>inner.currentCatalog</code>替换.结果成功!</p>

<p>如思路,执行主查询后,子查询前把connection替换为另一个数据库连接,并且通过调用者<code>StatementHandler</code>的<code>delegate.mappedStatement.id</code>可以取到子查询的id,再通过对id名称的约定(名称中包含db名称)实现扩展.</p>

<h3>问题</h3>

<p>在使用中发现,连续查询20次之后就无法查询了,怀疑是因为connection没有close的原因.debug发现确实是卡在了<code>dataSource.getConnection()</code>,改良方法:<code>invocation.proceed();</code>执行之后手动关闭connection.</p>

<p>解决问题.</p>

<h3>代码</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">com.mchange.v2.c3p0.ComboPooledDataSource</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.mchange.v2.c3p0.impl.NewProxyConnection</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.foooooo.common.util.SpringBeanFactoryUtils</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.ibatis.executor.statement.StatementHandler</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.ibatis.plugin.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.ibatis.reflection.MetaObject</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.ibatis.reflection.factory.DefaultObjectFactory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.ibatis.reflection.factory.ObjectFactory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.ibatis.reflection.wrapper.DefaultObjectWrapperFactory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.ibatis.reflection.wrapper.ObjectWrapperFactory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.ibatis.session.ResultHandler</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.lang.reflect.Field</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.sql.Connection</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.sql.Statement</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Properties</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Created by SargerasWang on 15/4/9.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@Intercepts</span><span class="o">({</span><span class="nd">@Signature</span><span class="o">(</span><span class="n">type</span> <span class="o">=</span> <span class="n">StatementHandler</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="s">&quot;query&quot;</span><span class="o">,</span> <span class="n">args</span> <span class="o">=</span> <span class="o">{</span><span class="n">Statement</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">ResultHandler</span><span class="o">.</span><span class="na">class</span><span class="o">})})</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DynamicDatasourcePlugin</span> <span class="kd">implements</span> <span class="n">Interceptor</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">ObjectFactory</span> <span class="n">DEFAULT_OBJECT_FACTORY</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DefaultObjectFactory</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">ObjectWrapperFactory</span> <span class="n">DEFAULT_OBJECT_WRAPPER_FACTORY</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DefaultObjectWrapperFactory</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">intercept</span><span class="o">(</span><span class="n">Invocation</span> <span class="n">invocation</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Statement</span> <span class="n">statement</span> <span class="o">=</span> <span class="o">(</span><span class="n">Statement</span><span class="o">)</span> <span class="n">invocation</span><span class="o">.</span><span class="na">getArgs</span><span class="o">()[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>        <span class="n">StatementHandler</span> <span class="n">statementHandler</span> <span class="o">=</span> <span class="o">(</span><span class="n">StatementHandler</span><span class="o">)</span> <span class="n">invocation</span><span class="o">.</span><span class="na">getTarget</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">MetaObject</span> <span class="n">metaStatement</span> <span class="o">=</span>  <span class="n">getRealObj</span><span class="o">(</span><span class="n">statement</span><span class="o">);</span>
</span><span class='line'>        <span class="n">MetaObject</span> <span class="n">metaStatementHandler</span> <span class="o">=</span> <span class="n">getRealObj</span><span class="o">(</span><span class="n">statementHandler</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">String</span> <span class="n">index</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">metaStatementHandler</span><span class="o">.</span><span class="na">getValue</span><span class="o">(</span><span class="s">&quot;delegate.mappedStatement.id&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">index</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">&quot;_formatter_&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">dataSourceBeanName</span> <span class="o">=</span> <span class="n">index</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="s">&quot;_formatter_&quot;</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">index</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="s">&quot;!&quot;</span><span class="o">));</span>
</span><span class='line'>            <span class="n">ComboPooledDataSource</span> <span class="n">dataSource</span> <span class="o">=</span> <span class="o">(</span><span class="n">ComboPooledDataSource</span><span class="o">)</span> <span class="n">SpringBeanFactoryUtils</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&quot;ds_&quot;</span> <span class="o">+</span> <span class="n">dataSourceBeanName</span><span class="o">);</span>
</span><span class='line'>            <span class="n">NewProxyConnection</span> <span class="n">connection</span> <span class="o">=</span> <span class="o">(</span><span class="n">NewProxyConnection</span><span class="o">)</span><span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Field</span> <span class="n">inner</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&quot;inner&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">inner</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">metaStatement</span><span class="o">.</span><span class="na">setValue</span><span class="o">(</span><span class="s">&quot;inner.connection&quot;</span><span class="o">,</span><span class="n">inner</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">connection</span><span class="o">)</span> <span class="o">);</span>
</span><span class='line'>            <span class="n">metaStatement</span><span class="o">.</span><span class="na">setValue</span><span class="o">(</span><span class="s">&quot;inner.currentCatalog&quot;</span><span class="o">,</span> <span class="n">dataSourceBeanName</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Object</span> <span class="n">result</span> <span class="o">=</span> <span class="n">invocation</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">connection</span><span class="o">.</span><span class="na">close</span><span class="o">();</span><span class="c1">//这里关闭连接</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">invocation</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">MetaObject</span> <span class="nf">getRealObj</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">MetaObject</span> <span class="n">metaStatement</span> <span class="o">=</span> <span class="n">MetaObject</span><span class="o">.</span><span class="na">forObject</span><span class="o">(</span><span class="n">obj</span><span class="o">,</span> <span class="n">DEFAULT_OBJECT_FACTORY</span><span class="o">,</span>
</span><span class='line'>                <span class="n">DEFAULT_OBJECT_WRAPPER_FACTORY</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">// 分离代理对象链(由于目标类可能被多个拦截器拦截，从而形成多次代理，通过下面的两次循环可以分离出最原始的的目标类)</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">metaStatement</span><span class="o">.</span><span class="na">hasGetter</span><span class="o">(</span><span class="s">&quot;h&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Object</span> <span class="n">object</span> <span class="o">=</span> <span class="n">metaStatement</span><span class="o">.</span><span class="na">getValue</span><span class="o">(</span><span class="s">&quot;h&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">metaStatement</span> <span class="o">=</span> <span class="n">MetaObject</span><span class="o">.</span><span class="na">forObject</span><span class="o">(</span><span class="n">object</span><span class="o">,</span> <span class="n">DEFAULT_OBJECT_FACTORY</span><span class="o">,</span> <span class="n">DEFAULT_OBJECT_WRAPPER_FACTORY</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="c1">// 分离最后一个代理对象的目标类</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">metaStatement</span><span class="o">.</span><span class="na">hasGetter</span><span class="o">(</span><span class="s">&quot;target&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Object</span> <span class="n">object</span> <span class="o">=</span> <span class="n">metaStatement</span><span class="o">.</span><span class="na">getValue</span><span class="o">(</span><span class="s">&quot;target&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">metaStatement</span> <span class="o">=</span> <span class="n">MetaObject</span><span class="o">.</span><span class="na">forObject</span><span class="o">(</span><span class="n">object</span><span class="o">,</span> <span class="n">DEFAULT_OBJECT_FACTORY</span><span class="o">,</span> <span class="n">DEFAULT_OBJECT_WRAPPER_FACTORY</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">metaStatement</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">plugin</span><span class="o">(</span><span class="n">Object</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Plugin</span><span class="o">.</span><span class="na">wrap</span><span class="o">(</span><span class="n">target</span><span class="o">,</span> <span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setProperties</span><span class="o">(</span><span class="n">Properties</span> <span class="n">properties</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[简单的linux下maven程序自动部署脚本]]></title>
    <link href="http://sargeraswang.com/blog/2015/03/05/jian-dan-de-linuxxia-mavencheng-xu-zi-dong-bu-shu-jiao-ben/"/>
    <updated>2015-03-05T16:19:00+08:00</updated>
    <id>http://sargeraswang.com/blog/2015/03/05/jian-dan-de-linuxxia-mavencheng-xu-zi-dong-bu-shu-jiao-ben</id>
    <content type="html"><![CDATA[<blockquote><p>vps服务器弄好之后,每次更改完代码都是本地打包,上传war到服务器,再替换数据库配置,重启服务.
刚开始偶尔一次还好,但频繁操作就受不了了,然后写了以下脚本.</p></blockquote>

<h2>部署流程</h2>

<h4>1.从github更新</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git pull
</span></code></pre></td></tr></table></div></figure>


<h4>2.替换数据库配置</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>cp -f ../db_config/db.properties ./src/main/resources/props/db.properties
</span></code></pre></td></tr></table></div></figure>


<p>修改log4j配置文件的第一行,服务器端有mail,本机没有</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sed -i <span class="s1">&#39;1c log4j.rootLogger=INFO,stdout,stderr,mail&#39;</span> ./src/main/resources/log4j.properties
</span></code></pre></td></tr></table></div></figure>


<h4>3.打包</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mvn package
</span></code></pre></td></tr></table></div></figure>


<h4>4.停止tomcat</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>service tomcat stop
</span></code></pre></td></tr></table></div></figure>


<h4>5.删除原文件夹</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rm -rf /var/lib/tomcat7/webapps/ROOT
</span></code></pre></td></tr></table></div></figure>


<h4>6.改名+复制包到tomcat</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mv target/WebManager.war target/ROOT.war
</span><span class='line'>cp -f target/ROOT.war /var/lib/tomcat7/webapps/
</span></code></pre></td></tr></table></div></figure>


<h4>7.启动tomcat</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>service tomcat7 start
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>shell:</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh                                                                                                                                   </span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;==============================开始部署==============================&quot;</span>
</span><span class='line'><span class="nb">cd</span> /usr/local/project/csm-framework/
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;##############################更新git##############################&quot;</span>
</span><span class='line'>git pull
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;########################替换数据库配置#############################&quot;</span>
</span><span class='line'>cp -f ../db_config/db.properties ./src/main/resources/props/db.properties
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;########################修改Log4j配置#############################&quot;</span>
</span><span class='line'>sed -i <span class="s1">&#39;1c log4j.rootLogger=INFO,stdout,stderr,mail&#39;</span> ./src/main/resources/log4j.properties
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;############################打包###################################&quot;</span>
</span><span class='line'>mvn clean package
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;#########################停止tomcat################################&quot;</span>
</span><span class='line'>service tomcat7 stop
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;##########################删除原文件夹#############################&quot;</span>
</span><span class='line'>rm -rf /var/lib/tomcat7/webapps/*
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;##########################解压到webapps############################&quot;</span>
</span><span class='line'>unzip -o target/WebManager.war -d /var/lib/tomcat7/webapps/ROOT/
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;############################启动tomcat#############################&quot;</span>
</span><span class='line'>service tomcat7 start
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;==============================部署完成==============================&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在VPS上搭建tomcat+mysql]]></title>
    <link href="http://sargeraswang.com/blog/2015/02/16/zai-vpsshang-da-jian-tomcat-plus-mysql/"/>
    <updated>2015-02-16T13:54:00+08:00</updated>
    <id>http://sargeraswang.com/blog/2015/02/16/zai-vpsshang-da-jian-tomcat-plus-mysql</id>
    <content type="html"><![CDATA[<blockquote><p>很久没有写blog了,从去年底开始一直在整一个框架,现在最最基础的东西好了.
就想着给基友演示一下,看了一下国外的VPS,价格还可以接受,而且还可以增强linux的操作熟练度,就租了.
这篇是写从租服务器开始直到可以通过<a href="http://csm.sargeraswang.com">http://csm.sargeraswang.com</a>访问到我的站点.</p></blockquote>

<h3>准备</h3>

<ol>
<li>你自己的域名</li>
<li>支持<code>VISA</code>或者<code>MasterCard</code>的信用卡</li>
<li>你的网站程序</li>
</ol>


<!-- more -->


<h2>开始</h2>

<h3>1.购买VPS</h3>

<p>对VPS的选购我是从<a href="http://www.vpsmm.com/">这里</a>找的,具体我购买的是<a href="https://peakservers.com/">peakservers</a>的配置[256MB/10GB/1core],价格15$/年.</p>

<p>购买的时候会让你选择系统,我选择的是<code>ubuntu14.04 64bit</code>.</p>

<p>购买之后,你可以看到分配给你的IP,root的密码.</p>

<h3>2.安装</h3>

<p>打开终端,输入 <code>ssh root@服务器IP</code> 回车,输入密码,登陆成功.</p>

<h4>安装mysql</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>apt-get update
</span><span class='line'>apt-get install mysql-server
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>输入mysql的root密码两次,安装完成</p></blockquote>

<h4>安装tomcat</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>apt-get install tomcat7
</span></code></pre></td></tr></table></div></figure>


<h4>安装emacs(可选)</h4>

<p>由于我只会一点点emacs而不会使用vi,所以需要安装emacs,如果你用vi,可以忽略这步.后文中所有<code>emacs</code>请自行使用vi.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>apt-get install emacs
</span></code></pre></td></tr></table></div></figure>


<h3>3.配置</h3>

<h4>关闭系统的Apache2服务</h4>

<p>系统默认有apache2服务占用80端口,需要关闭:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>service apache2 stop
</span></code></pre></td></tr></table></div></figure>


<h4>修改tomcat端口为80</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>emacs /var/lib/tomcat7/conf/server.xml
</span></code></pre></td></tr></table></div></figure>


<p>找到这行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Connector</span> <span class="na">port=</span><span class="s">&quot;8080&quot;</span> <span class="na">protocol=</span><span class="s">&quot;HTTP/1.1&quot;</span>
</span><span class='line'>               <span class="na">connectionTimeout=</span><span class="s">&quot;20000&quot;</span>
</span><span class='line'>               <span class="na">URIEncoding=</span><span class="s">&quot;UTF-8&quot;</span>
</span><span class='line'>               <span class="na">redirectPort=</span><span class="s">&quot;8443&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Connector</span> <span class="na">port=</span><span class="s">&quot;80&quot;</span> <span class="na">protocol=</span><span class="s">&quot;HTTP/1.1&quot;</span>
</span><span class='line'>               <span class="na">connectionTimeout=</span><span class="s">&quot;20000&quot;</span>
</span><span class='line'>               <span class="na">URIEncoding=</span><span class="s">&quot;UTF-8&quot;</span>
</span><span class='line'>               <span class="na">redirectPort=</span><span class="s">&quot;8443&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>ctrl+x ctrl+s</code>保存,<code>ctrl+x ctrl+c</code>退出.</p>

<p>由于linux中1024以下端口只有root用户才有权限占用,而使用<code>apt-get</code>方式安装的Tomcat默认会新增一个用户使用.所以我们要修改启动Tomcat的用户为root.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>emacs /etc/default/tomcat7
</span></code></pre></td></tr></table></div></figure>


<p>找到这行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">TOMCAT7_USER</span><span class="o">=</span>tomcat7
</span></code></pre></td></tr></table></div></figure>


<p>修改为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">TOMCAT7_USER</span><span class="o">=</span>root
</span></code></pre></td></tr></table></div></figure>


<p>保存退出.</p>

<h3>4.上传数据库&amp;程序</h3>

<p>打开FileZilla,<code>主机</code>输入服务器IP,<code>用户名</code>输入<code>root</code>,<code>密码</code>输入你的root密码,<code>端口</code>输入<code>22</code>,点击<code>快速连接</code>.</p>

<h4>数据库备份与还原</h4>

<ul>
<li>备份本地的数据库</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mysqldump -u root -p 数据库名称 &gt; /某个目录/db.sql
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>上传到服务器</li>
</ul>


<p>使用FileZilla,从左侧框体(就是你本机目录)中找到刚才的<code>db.sql</code>,在右侧框体(服务器目录)的根目录下新建一个文件夹用于存放上传的文件,我这里叫<code>download</code>.<br/>
然后,将文件从左侧拖拽到右侧,等待上传完成.</p>

<ul>
<li>从服务器上还原数据库</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mysql -u root -p
</span></code></pre></td></tr></table></div></figure>


<p>输入你服务上mysql的root密码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">create</span> <span class="k">database</span> <span class="err">数据库名称</span><span class="p">;</span>
</span><span class='line'><span class="n">use</span> <span class="err">数据库名称</span><span class="p">;</span>
</span><span class='line'><span class="k">source</span> <span class="o">/</span><span class="n">download</span><span class="o">/</span><span class="n">db</span><span class="p">.</span><span class="k">sql</span>
</span></code></pre></td></tr></table></div></figure>


<h4>程序打包上传</h4>

<ol>
<li>将打包好的war包通过FileZilla上传到服务器.</li>
<li>在服务器端:

<ol>
<li>复制war包到webapps目录<br/>
<code>
cp /download/WebManager.war /var/lib/tomcat7/webapps/
</code></li>
<li>重启tomcat解压war<br/>
<code>
service tomcat7 restart
</code></li>
<li>将程序移动到ROOT文件夹<br/>
<code>
rm -rf WebManager.war
rm -rf ROOT
mv WebManager ROOT
</code></li>
<li>重启tomcat<br/>
<code>
service tomcat7 restart
</code></li>
</ol>
</li>
<li>通过服务器ip访问测试服务是否正常</li>
</ol>


<h3>5.域名绑定</h3>

<p>登陆到你的域名解析界面,新增一条<code>A记录</code>,记录值为你的服务器IP,完成.</p>

<h3>完成</h3>

<p><img src="http://sargeraswang.com/images/blog_img/vps/success.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bootbox.js 4.3.0设置为中文]]></title>
    <link href="http://sargeraswang.com/blog/2014/12/01/bootbox-dot-js-4-dot-3-0she-zhi-wei-zhong-wen/"/>
    <updated>2014-12-01T09:06:00+08:00</updated>
    <id>http://sargeraswang.com/blog/2014/12/01/bootbox-dot-js-4-dot-3-0she-zhi-wei-zhong-wen</id>
    <content type="html"><![CDATA[<p>bootbox.js 是bootstrap用的alert/confirm插件,支持多语言.中文设置方法:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">bootbox</span><span class="p">.</span><span class="nx">setDefaults</span><span class="p">({</span><span class="nx">locale</span><span class="o">:</span><span class="s2">&quot;zh_CN&quot;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后alert的确认按钮,还是显示为<code>OK</code>,直接去源码修改:
bootbox.js 最后位置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">zh_CN</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">OK</span>      <span class="o">:</span> <span class="s2">&quot;OK&quot;</span><span class="p">,</span><span class="c1">//修改这里</span>
</span><span class='line'>      <span class="nx">CANCEL</span>  <span class="o">:</span> <span class="s2">&quot;取消&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">CONFIRM</span> <span class="o">:</span> <span class="s2">&quot;确认&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ER/Studio for mac 移植版制作教程与下载]]></title>
    <link href="http://sargeraswang.com/blog/2014/10/14/er-slash-studio-for-mac-yi-zhi-ban-zhi-zuo-jiao-cheng-yu-xia-zai/"/>
    <updated>2014-10-14T11:24:00+08:00</updated>
    <id>http://sargeraswang.com/blog/2014/10/14/er-slash-studio-for-mac-yi-zhi-ban-zhi-zuo-jiao-cheng-yu-xia-zai</id>
    <content type="html"><![CDATA[<p>先上图:<br/>
<img src="http://sargeraswang.com/images/blog_img/erstudio/new.png" alt="" /></p>

<h3>原理</h3>

<p>使用<a href="http://wineskin.urgesoftware.com/tiki-index.php">Wineskin</a>安装一个Windows的ER/Studio</p>

<h3>步骤</h3>

<ol>
<li>下载wineskin,地址<a href="http://wineskin.urgesoftware.com/tiki-index.php?page=Downloads">http://wineskin.urgesoftware.com/tiki-index.php?page=Downloads</a></li>
<li>运行wineskin,点击加号[+],新增一个engine,我用的是<code>WS9Wine 1.7.28</code>,点击[Download And Install].</li>
</ol>


<!-- more -->


<p><img src="http://sargeraswang.com/images/blog_img/erstudio/wine1.png" alt="" />
<img src="http://sargeraswang.com/images/blog_img/erstudio/wine2.png" alt="" /><br/>
3. 使用上一步安装的engine创建一个应用,点击<code>Create New Blank Wrapper</code>,输入一个名字,比方说<code>"ERStudio"</code>,<strong>注意不要用<code>"ER/Studio"</code>,貌似斜杠会影响文件的创建</strong>.,创建好后会弹出一个提示,问是否要安装<code>.NET</code>,点取消,又一个提示是否安装<code>HTML</code>,也取消,再稍等一下.会告诉你创建完成了,然后点击<code>View wrapper in Finder</code>.<br/>
<img src="http://sargeraswang.com/images/blog_img/erstudio/alert1.png" alt="" />
<img src="http://sargeraswang.com/images/blog_img/erstudio/alert2.png" alt="" />
<img src="http://sargeraswang.com/images/blog_img/erstudio/alert3.png" alt="" /><br/>
4. 右键xxxx.app->显示包内容,运行<code>Wineskin.app</code>.点击<code>Install Software</code>&ndash;><code>Choose Setup Executable</code>,选择ER/Studio的EXE安装程序(<a href="http://pan.baidu.com/wap/shareview?&amp;shareid=1817104890&amp;uk=2336093466&amp;dir=%2F%E5%88%86%E4%BA%AB%2Fsoftwave%2FERStudio8&amp;page=1&amp;num=20&amp;fsid=4244204594&amp;third=4">下载地址</a>),下一步..下一步..下一步&hellip;&hellip;安装完成.<br/>
<img src="http://sargeraswang.com/images/blog_img/erstudio/install1.png" alt="" />
<img src="http://sargeraswang.com/images/blog_img/erstudio/install2.png" alt="" /><br/>
5. 下载破解文件(<a href="http://pan.baidu.com/wap/shareview?&amp;shareid=1817104890&amp;uk=2336093466&amp;dir=%2F%E5%88%86%E4%BA%AB%2Fsoftwave%2FERStudio8&amp;page=1&amp;num=20&amp;fsid=1394660492&amp;third=4">下载地址</a>),把解压出来的破解工具<code>3ddown.com_patch_setup.exe</code>放在ER/Studio的安装目录下<code>ERStudio.app/Contents/Resources/drive_c/Program Files/Embarcadero/ERStudio8.0/3ddown.com_patch_setup.exe</code>.然后到上层找到<code>Wineskin</code>运行,选择<code>Advanced</code>,在<code>Windows EXE</code>选择刚才的<code>3ddown.com_patch_setup.exe</code>文件.点击<code>Test Run</code>,运行破解.
<img src="http://sargeraswang.com/images/blog_img/erstudio/keygen.png" alt="" /><br/>
6. 还是在上一步的<code>Windows EXE</code>,选择ER/Studio的运行文件<code>/Program Files/Embarcadero/ERStudio8.0/ERSTUDIO.exe</code>.测试一下是否可以运行,点击<code>Test Run</code>.<br/>
7. 修改图标,我从<code>ERSTUDIO.exe</code>里提取出来的icon.<a href="http://sargeraswang.com/images/blog_img/erstudio/icon.icns">下载地址</a>,替换上即可.</p>

<h3>使用须知</h3>

<p><del>由于这种方式的原理是虚拟了一个windows环境,所以这个应用无法读取到应用之外的文件,想要打开ER图,可以把图放在<code>ERStudio.app/Contents/Resources/drive_c/</code>下面,例如我们ER图放在SVN上,直接把ER图的文件夹CheckOut到这里.</del></p>

<p>应用第一次启动,会在你的<code>文稿</code>目录中创建一个<code>ERStudio8.0</code>文件夹,把ER图放这里就好,其实应用可以访问到整个<code>文稿</code>文件夹.</p>

<h3>完整版下载</h3>

<p>百度云下载:<a href="http://yun.baidu.com/share/link?shareid=1037072841&amp;uk=1309001135">http://yun.baidu.com/share/link?shareid=1037072841&amp;uk=1309001135</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[office for mac word 设置每页行数与每行字数(指定行网格和字符网格)]]></title>
    <link href="http://sargeraswang.com/blog/2014/10/09/office-for-mac-word-she-zhi-mei-ye-xing-shu-yu-mei-xing-zi-shu-zhi-ding-xing-wang-ge-he-zi-fu-wang-ge/"/>
    <updated>2014-10-09T09:35:00+08:00</updated>
    <id>http://sargeraswang.com/blog/2014/10/09/office-for-mac-word-she-zhi-mei-ye-xing-shu-yu-mei-xing-zi-shu-zhi-ding-xing-wang-ge-he-zi-fu-wang-ge</id>
    <content type="html"><![CDATA[<p>毕业论文要求格式之一是,每行30字,每页25行.查到windows下word中的设置在<code>文件</code>——<code>页面设置</code>——<code>在网格选择“指定行和字符网络”</code>,可mac版中没有这个选项,经过挨个排查,找到这项设置在<code>文件</code>&ndash;><code>页面设置</code>&ndash;><code>[设置]下拉选择[Microsoft Word]</code>&ndash;><code>页边距</code>&ndash;><code>文档网格</code>&ndash;><code>指定行网格和字符网格</code>,然后在下方输入每页多少行,每行多少字.</p>

<!-- more -->


<p><img src="http://sargeraswang.com/images/blog_img/word_col_row.png" alt="" /></p>

<p>使用后发现,明明设置每行30字,可实际总是在20字左右,行数也不对.测试后发现:</p>

<ol>
<li>每行字数不正确的,是由于在<code>字体...</code>中设置过<code>字符间距</code>,解决办法就是选中文字,点击<code>格式</code>&ndash;><code>字体...</code>&ndash;><code>高级</code>修改<code>间距</code>为<code>常规</code>,<code>位置</code>为<code>常规</code>.如下图:  <br/>
<img src="http://sargeraswang.com/images/blog_img/word_col.png" alt="" /></li>
<li>每页行数不正确的,是由于设置过<code>行间距</code>,解决办法是选中文字,点击<code>格式</code>&ndash;><code>段落...</code>&ndash;><code>间距</code>,<code>行距</code>设置为默认的<code>单倍行距</code>.如下图:  <br/>
<img src="http://sargeraswang.com/images/blog_img/word_row.png" alt="" /></li>
</ol>


<h5>大功告成!</h5>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac下使用的二维码扫描工具并且可以直接识别图片中的二维码 QR Journal]]></title>
    <link href="http://sargeraswang.com/blog/2014/09/25/macxia-shi-yong-de-er-wei-ma-sao-miao-gong-ju-bing-qie-ke-yi-zhi-jie-shi-bie-tu-pian-zhong-de-er-wei-ma/"/>
    <updated>2014-09-25T10:22:00+08:00</updated>
    <id>http://sargeraswang.com/blog/2014/09/25/macxia-shi-yong-de-er-wei-ma-sao-miao-gong-ju-bing-qie-ke-yi-zhi-jie-shi-bie-tu-pian-zhong-de-er-wei-ma</id>
    <content type="html"><![CDATA[<p>QR Journal:<a href="http://www.macupdate.com/app/mac/41127/qr-journal">下载地址</a></p>

<h4>使用方法:</h4>

<ol>
<li><p>用摄像头扫描,点击<code>Scan</code>按钮进行.</p></li>
<li><p>读取本机图片,点击<code>Import</code>按钮,将本机图片文件拖入弹出框中</p></li>
</ol>


<!--more-->


<p><img src="http://sargeraswang.com/images/blog_img/QR_Journal.png" alt="" />
<img src="http://sargeraswang.com/images/blog_img/QR_Journal2.png" alt="" /></p>

<p><strong>手机照的照片包含二维码,用这个工具貌似扫不出来</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[com.atomikos.icatch.SysException:Error in init(): Log already in use? 的另一种原因]]></title>
    <link href="http://sargeraswang.com/blog/2014/09/24/com-dot-atomikos-dot-icatch-dot-sysexception-error-in-init-log-already-in-use-de-ling-chong-yuan-yin/"/>
    <updated>2014-09-24T16:07:00+08:00</updated>
    <id>http://sargeraswang.com/blog/2014/09/24/com-dot-atomikos-dot-icatch-dot-sysexception-error-in-init-log-already-in-use-de-ling-chong-yuan-yin</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Error setting property values; nested exception is org.springframework.beans.PropertyBatchUpdateException;
</span><span class='line'>nested PropertyAccessExceptions (1) are:
</span><span class='line'>PropertyAccessException 1: org.springframework.beans.MethodInvocationException:
</span><span class='line'>Property 'transactionTimeout' threw exception; nested exception is com.atomikos.icatch.SysException:
</span><span class='line'>Error in init(): Log already in use?
</span><span class='line'>  at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289)
</span><span class='line'>  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1147)
</span><span class='line'>  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)
</span></code></pre></td></tr></table></div></figure>


<p>今天突然发生了这奇怪的事情,前两天服务器还很好,今天就抛出这个异常了.</p>

<p>首先,想起来同事曾经遇到过<code>Log already in use</code>的问题,是因为同一个项目启动了两次,检查服务器后发现就启动了一次,不是这个原因.<strong>还有一个重点,我本机(MacBook)和同事的机器(windows)启动都没有这个问题,就服务器(linux)会有.</strong></p>

<!--more-->


<p>马上去Google,网上说法总结为两个原因:</p>

<ol>
<li>一个项目,已经启动了,再次启动的时候报错.

<ul>
<li>解决办法:停止已启动的实例,再启动.</li>
</ul>
</li>
<li>同一个环境中存在多个这种使用jta的项目,启动第二/三/四&hellip;个的时候.

<ul>
<li>解决办法:为每个项目配置使用不同的log文件,如下</li>
</ul>
</li>
</ol>


<p>jta.properties</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="c">#项目一</span>
</span><span class='line'><span class="na">com.atomikos.icatch.console_file_name</span> <span class="o">=</span> <span class="s">rm1.out</span>
</span><span class='line'><span class="na">com.atomikos.icatch.log_base_name</span> <span class="o">=</span> <span class="s">rmlog1.log</span>
</span></code></pre></td></tr></table></div></figure>


<p>jta.properties</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="c">#项目二</span>
</span><span class='line'><span class="na">com.atomikos.icatch.console_file_name</span> <span class="o">=</span> <span class="s">rm2.out</span>
</span><span class='line'><span class="na">com.atomikos.icatch.log_base_name</span> <span class="o">=</span> <span class="s">rmlog2.log</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是,经过尝试,均无法解决问题.然后尝试本机搜索了一下<code>rmlog2.log</code>,结果发现在resin根目录下有.就去服务器看,结果没有.马上脑洞大开,<strong>会不会是因为权限??</strong></p>

<p>结果,&ldquo;what f*ck&rdquo;,就是权限的问题.因为昨天同事把resin目录的普通用户的写权限给禁用了.</p>

<h3>解决办法:配置log文件为绝对路径(要有权限)</h3>

<p>jta.properties</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="na">com.atomikos.icatch.service</span><span class="o">=</span><span class="s">com.atomikos.icatch.standalone.UserTransactionServiceFactory</span>
</span><span class='line'><span class="na">com.atomikos.icatch.output_dir</span><span class="o">=</span><span class="s">/data/logs/xxx/</span>
</span><span class='line'><span class="na">com.atomikos.icatch.log_base_dir</span><span class="o">=</span><span class="s">/data/logs/xxx/</span>
</span><span class='line'><span class="na">com.atomikos.icatch.console_file_name</span> <span class="o">=</span> <span class="s">tm.out   </span>
</span><span class='line'><span class="na">com.atomikos.icatch.log_base_name</span> <span class="o">=</span> <span class="s">tm.log    </span>
</span><span class='line'><span class="na">com.atomikos.icatch.max_timeout</span> <span class="o">=</span> <span class="s">300000</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mysql  /usr/local/mysql/bin/mysqld: unknown variable default-character-set=utf8 解决办法]]></title>
    <link href="http://sargeraswang.com/blog/2014/08/20/mysql-slash-usr-slash-local-slash-mysql-slash-bin-slash-mysqld-unknown-variable-default-character-set-equals-utf8-jie-jue-ban-fa/"/>
    <updated>2014-08-20T20:21:00+08:00</updated>
    <id>http://sargeraswang.com/blog/2014/08/20/mysql-slash-usr-slash-local-slash-mysql-slash-bin-slash-mysqld-unknown-variable-default-character-set-equals-utf8-jie-jue-ban-fa</id>
    <content type="html"><![CDATA[<p>为了修改mysql默认字符集,按照网上的方式,修改了<code>my.cnf</code>,之后启动mysql报错:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> [ERROR] /usr/local/mysql/bin/mysqld: unknown variable
</span><span class='line'> 'default-character-set=utf8'
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>后来Google到<a href="http://lists.mysql.com/mysql/226319">官网的这篇文章</a>.</p>

<p>其中说道:</p>

<p><code>The above link says default-character-set is depreciated and you should
be   using  character-set-server. It also states default-character-set
was removed in v5.5.3.</code></p>

<p>解决方法:把<code>my.cnf</code> 中的</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>default-character-set=utf8</span></code></pre></td></tr></table></div></figure>


<p>修改为</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>character-set-server=utf8</span></code></pre></td></tr></table></div></figure>


<p>成功启动mysql.</p>

<p><img src="http://sargeraswang.com/images/blog_img/mysql_status.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac 下 Eclipse 使用Emac按键的设置]]></title>
    <link href="http://sargeraswang.com/blog/2014/05/09/mac-xia-eclipse-shi-yong-emacan-jian-de-she-zhi/"/>
    <updated>2014-05-09T16:41:00+08:00</updated>
    <id>http://sargeraswang.com/blog/2014/05/09/mac-xia-eclipse-shi-yong-emacan-jian-de-she-zhi</id>
    <content type="html"><![CDATA[<!--test -->


<blockquote><p>来填坑了，当初自己写下的文字果然力量非凡，原先就是因为不喜欢在编码时，总是需要右手离开主键盘区，找方向键来控制光标而烦恼，所以学了emacs。但是eclipse的emacs键位并不怎么好用，所以本文是记录如何设置eclipse的光标控制。<strong>好吧，主要是填坑<a href="http://sargeraswang.com/blog/2013/11/29/10pian-vs19tian-bo-ke-zhuan-xie-xiao-jie/">10篇vs19天博客撰写小结</a></strong></p></blockquote>

<!-- more -->


<h3>需要什么</h3>

<p>首先要分析需求，很简单，我不想让右手离开主键位区，去找上下左右按键。</p>

<p>那么，我需要能修改以下按键 ：</p>

<ul>
<li>上</li>
<li>下</li>
<li>左</li>
<li>右</li>
<li>行头</li>
<li>行尾</li>
</ul>


<h3>Keys很强大</h3>

<ol>
<li>去 eclipse->Preferences (快捷键 <code>Commend+，</code>)，filter中输入<code>Kyes</code>.
<img src="http://sargeraswang.com/images/blog_img/eclipse_keys.png" alt="" /></li>
<li>设置以下按键

<ul>
<li>上 <code>Line Up</code> 为 <code>Ctrl+P</code></li>
<li>下 <code>Line Down</code> 为 <code>Ctrl+N</code></li>
<li>左 <code>Previous Column</code> 为 <code>Ctrl+B</code></li>
<li>右 <code>Next Column</code> 为 <code>Ctrl+F</code></li>
<li>行头 <code>Line Start</code> 为 <code>Ctrl+A</code></li>
<li>行尾 <code>Line End</code> 为 <code>Ctrl+E</code><br/>
<img src="http://sargeraswang.com/images/blog_img/eclipse_keys2.png" alt="" /></li>
</ul>
</li>
</ol>


<h3>OK了，解放你的右胳膊吧</h3>

<p>之所以现在才写这篇，是因为我一直认为<code>左</code>和<code>右</code>应该是<code>Back</code>和<code>Forward</code>,一直无法使用，甚是恼火，直到我看了eclipse自带的emacs按键方案。</p>

<p><img src="http://sargeraswang.com/images/blog_img/eclipse_keys3.png" alt="" /></p>

<blockquote><p>哈，到现在，当初的坑就剩下最后一个了 <strong>使用maven搭建SSH框架</strong></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[花信之年-二十四岁]]></title>
    <link href="http://sargeraswang.com/blog/2014/03/25/hua-xin-zhi-nian-er-shi-si-sui/"/>
    <updated>2014-03-25T21:00:00+08:00</updated>
    <id>http://sargeraswang.com/blog/2014/03/25/hua-xin-zhi-nian-er-shi-si-sui</id>
    <content type="html"><![CDATA[<blockquote><p>有人问过我在外边闯荡会有孤单的感觉吗，我说不会，现在，我要证明这一点！
就像过24岁生日这天，我也并不孤单，有QQ邮箱和招商银行惦记着我！</p></blockquote>

<p>上班听了一天的水手，与十年前初次听的时候，感觉完全不同，当时更在意“风雨中这点痛算什么，至少我们还有
梦”，而现在更能理解“总是拿着微不足道的成就来骗自己，总是莫名其妙感到一阵的空虚”&hellip;</p>

<!-- more -->


<p><img src="http://sargeraswang.com/images/blog_img/24.jpg" alt="" /></p>

<h3>你变态了！</h3>

<p>“人总是在追逐稳定的同时追求刺激”，忘记是哪位名人说过的。而像我这个年纪，或许追逐刺激更多一些。回想近几年，自己在各方面都有成长，但总是嫌弃自己成长的太慢了。前同事说“你跟我们不是一类人，你已经变态了”，这应该就是快速成长的负面效果。当绝大部分的时间和精力都放在思考如何提高自己的专业能力，然后按照计划去做时，旁边的人会感觉你越来越没有“人性”，也就是“变态了”。</p>

<p>在我看来，这也是无法避免的，假设从程度1到程度8需要学习1000个小时，我的目标又是最短时间内达到程度8，那就抛弃其他时间，全心全意投入到学习中。人这一生中就是不断地做选择，而选择就是一个取舍的问题，既然取了技术，就要舍去那些能让你保持“正常”的能力。</p>

<h3>宣布目标的魔力</h3>

<p>路飞的梦想是成为海贼王，鸣人的目标是成为火影，东方不败的目标是成为天下第一。向身边的人宣传自己的梦想和目标，有着非凡的魔力，有一种自外而内能量在影响着自己。再加上发自内心的对梦想的向往，两种能量融会贯通。</p>

<p>最直接的就是，身边总是有人在你做事不够完美时会说“你不是要成为XXX的男人吗，这事怎么都做不好？”，这绝对不是挖苦，不是讽刺；而是赤裸裸的鼓励啊有木有，监督啊有木有。而我面对这样的鼓励时，总是报以感谢，然后把事情做好。再接下来，对方看到了你有听他的话，感受到了你对他的建议的重视程度，下次才会继续提出你的不足。如此下去，良性循环，皆大欢喜。</p>

<h3>你是否会后悔</h3>

<p>上面说到人生就是不断地做出选择，那我平时又是如何做出选择的呢。</p>

<ol>
<li>列出目前的选择，排除一轮不靠谱的，就是白给你都不选的.</li>
<li>把每个选择的成本、风险、收益列出来比较</li>
<li>当第二点做完后，还是无法抉择，那就使出杀手锏：<strong>哪个选择在几十年以后，回想起来，才不会后悔</strong>。</li>
<li>没有第四了，丢硬币吧骚年。</li>
</ol>


<p>当你七老八十，坐在摇椅上看《火影忍者》第20000话的时候，想到自己随时都可能老死，再回想自己的一生，无怨无悔，为自己的梦想计划了，努力了，坚持了&hellip;就可以闭上眼睛，心想“我操，火影的结局到底是啥！”</p>

<h3>直面内心的自己</h3>

<p>《自控力》对我的影响，从外层看是自控力的提升，从内在讲，更多的是不要欺骗自己，不要逃避自己，要直面自己内心深处。人天生就有欺骗自己的能力，因为生存下去是第一目标，所以可以骗自己没有看到受伤的同伴，骗自己明天可以打到更多的猎物。</p>

<p>没错，这些能力可以让你活下去的概率大大的提高，但是现在，你的目标就只是活着吗？如果不能分析自己的大脑，只能被自己骗。就像减肥一样，人天生就有对脂肪的渴望，当你靠近它们的时候，大脑会骗你“你现在很需要这块蛋糕，它可以提高你活下去的几率”，如果认识不到自己被自己的大脑骗了，那永远都无法减肥；戒烟同理。</p>

<p>上班时，自己已经提前完成了预定任务，看到别的同事在闲玩。你的大脑就会告诉你“你现在很累了，要劳逸结合，再说了，别人都在休息，你还那么努力，就吃亏了”，这个时候，你应该做的是告诉你的大脑：”草！老子怎么会就这点儿能耐，这TM能叫努力吗？比别人少休息哪能叫吃亏，真是被门挤了！“，如此长久，你就战胜了那个骗子.</p>

<blockquote><p>花信：开花时期，花期。指女子的年龄到了二十四岁。也泛指女子正处年轻貌美之时。高阳《胡雪岩全传·平步青云》上册：“而且正当花信年华，就如秋月将满，春花方盛，令人一见便觉不可错过。”</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs使用手册(二) 使用进阶]]></title>
    <link href="http://sargeraswang.com/blog/2014/03/18/emacsshi-yong-shou-ce-er-shi-yong-jin-jie/"/>
    <updated>2014-03-18T19:55:00+08:00</updated>
    <id>http://sargeraswang.com/blog/2014/03/18/emacsshi-yong-shou-ce-er-shi-yong-jin-jie</id>
    <content type="html"><![CDATA[<blockquote><p>一个多月没有写东西了，这期间发生了很多事，年初定的换工作的目标达成，收获颇丰。 <br/>
“外面的世界很精彩&hellip;外面的世界很无奈&hellip;北京&hellip;北京&hellip;”<br/>
哈，没那么文艺，新的城市，新的公司，新的开始，我还是不够努力，奔跑吧！少年！</p></blockquote>

<!-- more -->


<h3>被禁用的命令</h3>

<p>有一些 Emacs 命令被“禁用”了，以避免初学者误用，当你使用到了一个被禁用的命令，Emacs 会显示一个提示消息，告诉你这个命令到底是干什么的，询问你是否要继续，并在得到你的肯定后再执行这命令。</p>

<ul>
<li>如果你确定要执行，就按下空格</li>
<li>如果你不想用，就按下“n”

<blockquote><p>试试 Ctrl+x Ctrl+l<br/>
<img src="http://sargeraswang.com/images/blog_img/emacs/c_x_c_l.png" alt="" /></p></blockquote></li>
</ul>


<h3>窗格（WINDOWS）</h3>

<p>Emacs 可以有多个窗格，每个窗格显示不同的文字。</p>

<ul>
<li>关掉多余的窗格 <code>Ctrl+x 1</code></li>
<li>切换为2个窗口：

<ul>
<li>上下拆分<code>ctrl+x 2</code></li>
<li>左右拆分<code>ctrl+x 3</code><br/>
<img src="http://sargeraswang.com/images/blog_img/emacs/subWindow.png" alt="" /></li>
</ul>
</li>
<li>多窗口间切换光标 <code>ctrl+x o</code> <strong>这里o代表other</strong></li>
<li>滚动另外一个画面 <code>alt+ctrl+v</code></li>
<li>开启新窗口并打开指定文件 <code>ctrl+x 4 ctrl+f 文件名</code>

<blockquote><p>这个命令跟之前的命令不太一样，包含了两个字符，以Ctrl+x开始，有一系列命令都是以Ctrl+x开始的，许多都跟“窗格、文件、缓冲区”等有关，其中有些命令可能包含了2个、3个、4个字符。</p></blockquote></li>
</ul>


<h3>插入与删除</h3>

<ul>
<li>插入文字很简单，直接敲键盘就可以了。</li>
<li>删除前一个字符，用<code>Delete</code>，与 Emacs 之外的用法一样。</li>
<li>如果一行中文字显示不下，需要换行，那么：

<ul>
<li>在console下会有反斜杠<code>\</code>出现</li>
<li>在图形窗口中会有小小的转弯箭头出现
<img src="http://sargeraswang.com/images/blog_img/emacs/subline.png" alt="" /></li>
</ul>
</li>
<li>插入重复字符，插入八个星号<code>*</code>,<code>ctrl+u 8 *</code></li>
<li>删除指定区域内的文字，在开始的地方按下<code>ctrl+@</code>,结束的地方按下<code>ctrl+w</code>.</li>
<li><code>ctrl+y</code>可以把上次连续kill掉的内容都吐出来</li>
<li>如果<code>ctrl+y</code>里面没有你要的，你想要的是在更早的时候kill掉的，那就按下<code>alt+y</code>,如果还不是，就继续<code>alt+y</code>直到吐出你想要的为止</li>
</ul>


<h3>文件（FILE）</h3>

<ul>
<li>打开一个文件<code>ctrl+x ctrl+f</code>，输入一个不存在的文件名，就是 Emacs 创建文件的方式</li>
<li>储存这个文件<code>ctrl+x ctrl+s</code>,储存缓存区中的所有文件<code>ctrl+x s</code>.

<blockquote><p>第一次存盘的时候 Emacs 会将源文件重命名以备份，通常是在原文件名之后添加一个<code>~</code>
可以用这条命令关闭这个特性：<code>alt+x customize-variable &lt;Return&gt; make-backup-files &lt;Return&gt;】</code></p></blockquote></li>
<li>Emacs 会自动保存，在原文件名两侧加“#”，如果想恢复为自动保存的文件，使用命令：<code>alt+x recover file</code></li>
</ul>


<h3>缓冲区（BUFFER）</h3>

<ul>
<li>打开新的文件后，想切换会原先的文件，还是执行<code>ctrl+x ctrl+f</code>，输入先前的文件名即可。</li>
<li>列出缓冲区 <code>ctrl+x ctrl+b</code>
<img src="http://sargeraswang.com/images/blog_img/emacs/buffer.png" alt="" /></li>
<li><code>ctrl+x b</code>也可以用来切换缓冲区</li>
<li>并不是所有的缓冲区都对应一个文件，例如<code>*Messages*</code>里放着的都是 Emacs 底部出现的消息。</li>
</ul>


<blockquote><h3>命令集扩展</h3>

<p>Emacs 扩展命令的两种风格：</p></blockquote>

<table>
<thead>
<tr>
<th>按键 &amp; 名称 </th>
<th> 解释 </th>
<th> 举例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ctrl+x</code>   字符扩展。   </td>
<td> <code>ctrl+x</code>之后输入另一个字符或者组合键。 </td>
<td> <code>ctrl+x ctrl+s</code></td>
</tr>
<tr>
<td><code>alt+x</code>  命令名扩展。  </td>
<td> <code>alt+x</code>之后输入一个命令名 </td>
<td> <code>alt+x help-with-tutorial</code></td>
</tr>
</tbody>
</table>


<blockquote><p>在Console中，<code>ctrl+z</code>可以将Emacs暂时挂起，回到shell，再使用<code>fg</code>命令可以再切换回 Emacs。1</p></blockquote>

<ul>
<li>字符串替换命令：<code>alt+x replace-string</code> 两个参数分别用回车提交。比如要替换当前屏幕中所有“abc”为“def”，那应该执行<code>alt+x replace-string 回车 abc 回车 def</code></li>
</ul>


<h3>主/辅模式</h3>

<p>状态栏括号中表示当前使用的主模式，使用<code>alt+x 模式名称</code>来切换主模式。</p>

<blockquote><p>例如<code>alt+x text-mode</code>切换到Text模式
* 使用<code>ctrl+h m</code>可以查看当前主模式的文档
* 辅模式与子模式无关，与其他辅模式也无关
有一个叫做自动折行模式，可以再编辑自然语言文本的时候，打字超出一行边界时自动换行。<br/>
默认的行边界是70个字符，可以通过<code>ctrl+u 字符数 ctrl+x f</code>来设置<br/>
设定某段自动折行 <code>alt+q</code></p></blockquote>

<h3>搜索</h3>

<p>Emacs 是渐进式搜索，在你输入的同时Emacs就开始搜索了
* <code>ctrl+s</code>向前搜索
* <code>ctrl+r</code>向后搜索
* 结束搜索：
  * 回车：光标停留在搜索到的位置
  * <code>ctrl+g</code>：光标停留在执行搜索之前的位置</p>

<h3>递归编辑 （没试出来效果。。。后续补上）</h3>

<h3>使用帮助</h3>

<ul>
<li><code>ctrl+h 命令</code>可以查看对应命令的帮助，<code>ctrl+h ?</code>可以列出哪些命令有帮助。</li>
<li><code>ctrl+h c 按键</code>可以查看按键的说明。<code>ctrl+h k 按键</code>可以查看按键更详细的帮助</li>
<li><code>ctrl+h f 命令</code>可以查看命令的帮助</li>
<li><code>ctrl+h v 变量名</code>可以查看变量的文档。</li>
<li><code>ctrl+h a 命令</code>相关命令的搜索</li>
</ul>


<p><img src="http://sargeraswang.com/images/blog_img/benpao.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第3章 垃圾收集器与内存分配策略]]></title>
    <link href="http://sargeraswang.com/blog/2014/02/03/la-ji-shou-ji-qi-yu-nei-cun-fen-pei-ce-lue/"/>
    <updated>2014-02-03T16:40:00+08:00</updated>
    <id>http://sargeraswang.com/blog/2014/02/03/la-ji-shou-ji-qi-yu-nei-cun-fen-pei-ce-lue</id>
    <content type="html"><![CDATA[<h3>对象已死吗</h3>

<h4>引用计数算法</h4>

<blockquote><p>给对象添加引用计数器，每当有一个地方引用它时，计数器值就加1；当引用失效时，计数器值就减1；任何时刻计数器为0的对象就是不可能再被使用的。</p>

<p>它很难解决对象之间互相循环引用的问题。</p></blockquote>

<!-- more -->


<p><a href="http://item.jd.com/11252778.html"><img src="http://sargeraswang.com/images/blog_img/jvmbook.jpg" alt="" /></a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * VM Args: -XX:+PrintGCDetails</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReferenceCountingGC</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Object</span> <span class="n">instance</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">_1MB</span> <span class="o">=</span> <span class="mi">1024</span> <span class="o">*</span> <span class="mi">1024</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * 这个成员属性的唯一意义就是占点内存，以便能在GC日志中看清楚否被回收过</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">bigSize</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">_1MB</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">testGC</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ReferenceCountingGC</span> <span class="n">objA</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ReferenceCountingGC</span><span class="o">();</span>
</span><span class='line'>        <span class="n">ReferenceCountingGC</span> <span class="n">objB</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ReferenceCountingGC</span><span class="o">();</span>
</span><span class='line'>        <span class="n">objA</span><span class="o">.</span><span class="na">instance</span> <span class="o">=</span> <span class="n">objB</span><span class="o">;</span>
</span><span class='line'>        <span class="n">objB</span><span class="o">.</span><span class="na">instance</span> <span class="o">=</span> <span class="n">objA</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">objA</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">objB</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 假设在这行发生GC，objA和objB是否能被回收？</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">gc</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">testGC</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>输入日志：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[</span><span class="n">Full</span> <span class="n">GC</span> <span class="o">(</span><span class="n">System</span><span class="o">)</span> <span class="o">[</span><span class="nl">CMS:</span> <span class="mi">0</span><span class="n">K</span><span class="o">-&gt;</span><span class="mi">330</span><span class="n">K</span><span class="o">(</span><span class="mi">63872</span><span class="n">K</span><span class="o">),</span> <span class="mf">0.0114563</span> <span class="n">secs</span><span class="o">]</span> <span class="mi">5462</span><span class="n">K</span><span class="o">-&gt;</span><span class="mi">330</span><span class="n">K</span><span class="o">(</span><span class="mi">83008</span><span class="n">K</span><span class="o">),</span> <span class="o">[</span><span class="n">CMS</span> <span class="n">Perm</span> <span class="o">:</span> <span class="mi">4629</span><span class="n">K</span><span class="o">-&gt;</span><span class="mi">4628</span><span class="n">K</span><span class="o">(</span><span class="mi">21248</span><span class="n">K</span><span class="o">)],</span> <span class="mf">0.0115589</span> <span class="n">secs</span><span class="o">]</span> <span class="o">[</span><span class="nl">Times:</span> <span class="n">user</span><span class="o">=</span><span class="mf">0.02</span> <span class="n">sys</span><span class="o">=</span><span class="mf">0.00</span><span class="o">,</span> <span class="n">real</span><span class="o">=</span><span class="mf">0.01</span> <span class="n">secs</span><span class="o">]</span>
</span><span class='line'><span class="n">Heap</span>
</span><span class='line'> <span class="n">par</span> <span class="k">new</span> <span class="n">generation</span>   <span class="n">total</span> <span class="mi">19136</span><span class="n">K</span><span class="o">,</span> <span class="n">used</span> <span class="mi">1021</span><span class="n">K</span> <span class="o">[</span><span class="mi">7</span><span class="n">f3000000</span><span class="o">,</span> <span class="mi">7</span><span class="n">f44c0000</span><span class="o">,</span> <span class="mi">7</span><span class="n">f44c0000</span><span class="o">)</span>
</span><span class='line'>  <span class="n">eden</span> <span class="n">space</span> <span class="mi">17024</span><span class="n">K</span><span class="o">,</span>   <span class="mi">6</span><span class="o">%</span> <span class="n">used</span> <span class="o">[</span><span class="mi">7</span><span class="n">f3000000</span><span class="o">,</span> <span class="mi">7</span><span class="n">f30ff658</span><span class="o">,</span> <span class="mi">7</span><span class="n">f40a0000</span><span class="o">)</span>
</span><span class='line'>  <span class="n">from</span> <span class="n">space</span> <span class="mi">2112</span><span class="n">K</span><span class="o">,</span>   <span class="mi">0</span><span class="o">%</span> <span class="n">used</span> <span class="o">[</span><span class="mi">7</span><span class="n">f40a0000</span><span class="o">,</span> <span class="mi">7</span><span class="n">f40a0000</span><span class="o">,</span> <span class="mi">7</span><span class="n">f42b0000</span><span class="o">)</span>
</span><span class='line'>  <span class="n">to</span>   <span class="n">space</span> <span class="mi">2112</span><span class="n">K</span><span class="o">,</span>   <span class="mi">0</span><span class="o">%</span> <span class="n">used</span> <span class="o">[</span><span class="mi">7</span><span class="n">f42b0000</span><span class="o">,</span> <span class="mi">7</span><span class="n">f42b0000</span><span class="o">,</span> <span class="mi">7</span><span class="n">f44c0000</span><span class="o">)</span>
</span><span class='line'> <span class="n">concurrent</span> <span class="n">mark</span><span class="o">-</span><span class="n">sweep</span> <span class="n">generation</span> <span class="n">total</span> <span class="mi">63872</span><span class="n">K</span><span class="o">,</span> <span class="n">used</span> <span class="mi">330</span><span class="n">K</span> <span class="o">[</span><span class="mi">7</span><span class="n">f44c0000</span><span class="o">,</span> <span class="mi">7</span><span class="n">f8320000</span><span class="o">,</span> <span class="mi">7</span><span class="n">fae00000</span><span class="o">)</span>
</span><span class='line'> <span class="n">concurrent</span><span class="o">-</span><span class="n">mark</span><span class="o">-</span><span class="n">sweep</span> <span class="n">perm</span> <span class="n">gen</span> <span class="n">total</span> <span class="mi">21248</span><span class="n">K</span><span class="o">,</span> <span class="n">used</span> <span class="mi">4689</span><span class="n">K</span> <span class="o">[</span><span class="mi">7</span><span class="n">fae00000</span><span class="o">,</span> <span class="mi">7</span><span class="n">fc2c0000</span><span class="o">,</span> <span class="mi">800000000</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>其中<code>5462K-&gt;330K</code>说明虚拟机并没有因为这两个对象互相引用就不回收他们，这也从侧面说明虚拟机并不通过引用计数算法来判断对象是否存活的。</p></blockquote>

<h4>可达性分析算法</h4>

<ul>
<li>主流商用程序语言都是通过<strong>可达性分析(Reachability Analysis)</strong>来判定对象是否存活的。</li>
<li>通过一系列称为<code>GC Roots</code>的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链，当一个对象到GC Roots没有任何引用链相连时，则证明此对象是不可用的。</li>
<li>Java语言中的GC Roots：

<ul>
<li>虚拟机栈（栈帧中的本地变量表）中引用的对象</li>
<li>方法区中类静态属性引用的对象。</li>
<li>方法区中常量引用的对象。</li>
<li>本地方法栈中JNI（即一般说的Native方法）引用的对象。</li>
</ul>
</li>
</ul>


<h4>引用的分类</h4>

<ul>
<li>JDK1.2之后，Java对引用的概念进行了扩充

<ul>
<li>强引用（Strong Reference）：在程序代码之中普遍存在的 <code>Object obj = new Object()</code>，只要强引用还存在，垃圾收集器永远不会回收掉被引用的对象。</li>
<li>软引用（Soft Reference）：有用但并非必需的对象，<strong>在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行第二次回收</strong>，使用<code>SoftReference</code>类来实现软引用。</li>
<li>弱引用（Weak Reference）：非必须对象，<strong>只能生存到下一次垃圾收集发生之前</strong>，使用<code>WeakReference</code>类来实现弱引用。</li>
<li>虚引用（Phantom Reference）：也称<em>幽灵引用</em>或者<em>幻影引用</em>，**为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知,在JDK1.2之后，使用<code>PhantomReference</code>类来实现虚引用。</li>
</ul>
</li>
</ul>


<h4>生存还是死亡</h4>

<ul>
<li><p>要真正宣告一个对象死亡，至少要经历两次标记过程：</p>

<ul>
<li>可达性分析后，没有与GC Roots相连接的引用链，将会被第一次标记并进行一次筛选，当对象没有覆盖<code>finalize()</code>方法或者<code>finalize()</code>方法已经被虚拟机调用过，都没有必要执行<code>finalize()</code>方法。</li>
<li>有必要执行<code>finalize()</code>方法的对象会被放在<code>F-Queue</code>队列中，稍后由一个由一个虚拟机自动建立的Finalizer线程去执行它，<code>finalize()</code>方法是对象逃脱死亡命运的最后一次机会，</li>
</ul>
</li>
<li><p>一次对象自我拯救的演示</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FinalizeEscapeGC</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">FinalizeEscapeGC</span> <span class="n">SAVE_HOOK</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">isAlive</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;yes,i am still alive :)&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">finalize</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">finalize</span><span class="o">();</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;finalize method executed!&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">FinalizeEscapeGC</span><span class="o">.</span><span class="na">SAVE_HOOK</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">SAVE_HOOK</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FinalizeEscapeGC</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 对象第一次成功拯救自己</span>
</span><span class='line'>        <span class="n">SAVE_HOOK</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">gc</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">// 因为finalize方法优先级很低，所以暂停0.5秒以等待它</span>
</span><span class='line'>        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">500</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">SAVE_HOOK</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">SAVE_HOOK</span><span class="o">.</span><span class="na">isAlive</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;no,i am dead :(&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 下面这段代码与上面的完全相同，但是这次自救却失败了</span>
</span><span class='line'>        <span class="n">SAVE_HOOK</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">gc</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">500</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">SAVE_HOOK</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">SAVE_HOOK</span><span class="o">.</span><span class="na">isAlive</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;no,i am dead :(&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">finalize</span> <span class="n">method</span> <span class="n">executed</span><span class="o">!</span>
</span><span class='line'><span class="n">yes</span><span class="o">,</span><span class="n">i</span> <span class="n">am</span> <span class="n">still</span> <span class="n">alive</span> <span class="o">:)</span>
</span><span class='line'><span class="n">no</span><span class="o">,</span><span class="n">i</span> <span class="n">am</span> <span class="n">dead</span> <span class="o">:(</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>对象自救的机会只有一次，因为一个对象的finalize（）方法最多只会被系统自动调用一次</strong></p>

<blockquote><p><code>finalize()</code>方法只是Java刚诞生时为了使C/C++程序员更容易接受它所作出的一个妥协，运行代价高昂，不确定性大，无法保证各个对象的调用顺序，应尽量避免使用。</p></blockquote>

<h4>回收方法区</h4>

<p>要判定一个类是否是“无用的类”的条件，需要同时满足下面3个条件：</p>

<ol>
<li>该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例。</li>
<li>加载该类的ClassLoader已经被回收</li>
<li>该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li>
</ol>


<blockquote><p>在大量使用反射、动态代理、CGLib等ByteCode框、动态生成JSP以及OSGi这类频繁自定义ClassLoader的场景都需要虚拟机具备类卸载的功能，以保证永久带不会溢出。</p></blockquote>

<h3>垃圾收集算法</h3>

<p>几种算法的思想及其发展过程</p>

<h4>标记-清除算法</h4>

<blockquote><p>标记出所有需要回收的对象，之后统一回收所有被标记的对象。</p></blockquote>

<p>两个不足之处：</p>

<ul>
<li>效率问题：标记和清除两个过程的效率都不高</li>
<li>空间问题：标记清除之后会产生大量不连续的内存碎片，会导致以后在程序运行过程中需要分配大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</li>
</ul>


<h4>复制算法</h4>

<blockquote><p>将可用内存划分为大小相等的两块，每次只使用其中一块，当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。</p></blockquote>

<ul>
<li>商业虚拟机将内存分为一块较大的Eden和两块较小的Survivor空间，每次使用Eden和其中一块Survivor。当回收时，将Eden和Survivor中还存活着的对象一次性地复制到另外一块Survivor空间上，清理掉Eden和刚才用过的Survivor空间。</li>
<li>HotSpot虚拟机默认Eden和Survivor的大小比例是8：1</li>
</ul>


<h4>标记-整理算法</h4>

<blockquote><p>过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p></blockquote>

<h4>分代收集算法</h4>

<blockquote><p>当前商业虚拟机的垃圾收集都采用“分代收集”算法，根据对象存活周期的不同将内存划分为几块，一般是把Java堆分为新生代和老年代，根据各个年代的特点采用最适当的收集算法.</p></blockquote>

<h3>HotSpot的算法实现</h3>

<blockquote><p>在HotSpot的实现中，使用一组称为<code>OopMap</code>的数据结构来直接得知哪些地方存放着对象引用。</p></blockquote>

<h4>安全点(SafePoint)</h4>

<blockquote><p> 程序执行时并非在所有地方都能停顿下来开始GC，只有在到达安全点时才能暂停。</p></blockquote>

<ul>
<li>安全点的选定基本上是以程序“是否具有让程序长时间执行的特征”为标准进行选定的。</li>
<li>“长时间执行”的最明显特征就是指令序列复用，例如方法调用、循环跳转、异常跳转等，所以具有这些功能的指令才会产生Safepoint。</li>
<li>抢先式中断：在GC发生时，首先把所有线程全部中断，如果发现有线程中断的地方不在安全点上，就恢复线程，让它“跑”到安全点上。</li>
<li>主动式中断：当GC需要中断线程的时候，不直接对线程操作，仅仅简单的设置一个标志，各个线程执行时主动去轮询这个标志，发现标志为真时，就自己中断挂起。</li>
</ul>


<h4>安全区域</h4>

<blockquote><p>指在一段大妈片段中，引用关系不会发生变化，在这个区域中的任意地方开始GC都是安全的，也可以把安全区域看作是被扩展了的安全点。</p></blockquote>

<h3>垃圾收集器</h3>

<h4>Serial收集器</h4>

<ul>
<li>“Stop The World”:由虚拟机在后台自动发起和自动完成的，在用户不可见的情况下把用户正常工作的线程全部停掉，这对很多应用来说都是难以接受的。</li>
<li>Serial是虚拟机运行在Client模式下的默认新生代收集器，<strong>简单而高效</strong>（与其他收集器的单线程比），对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。</li>
</ul>


<h4>ParNew收集器</h4>

<blockquote><p>ParNew收集器其实就是Serial收集器的多线程版本。</p></blockquote>

<ul>
<li>是许多运行在Server模式下的虚拟机中首选的新生代收集器，目前只有它能与CMS收集器配合工作。</li>
<li>ParNew收集器在单CPU的环境中绝对不会有比Serial收集器更好的效果</li>
</ul>


<h4>Parallel Scavenge收集器</h4>

<blockquote><p>CMS等收集器的关注点是尽可能地缩短垃圾收集时用户线程的停顿时间，而Parallel Scavenge收集器的目标则是达到一个可控制的吞吐量（Throughput），Parallel Scavenge收集器也经常称为“吞吐量优先”收集器
吞吐量=运行用户代码时间/(运行用户代码时间+垃圾收集时间)，虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%.</p></blockquote>

<ul>
<li>主要适合在后台运算而不需要太多交互的任务。</li>
<li>控制最大垃圾收集停顿时间 -XX:MaxGCPauseMillis</li>
<li>直接设置吞吐量大小 -XX:GCTimeRatio</li>
<li>虚拟机根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量，开启GC自适应调解策略 -XX:+UseAdptiveSizePolicy</li>
</ul>


<h4>Serial Old收集器</h4>

<blockquote><p>Serial收集器的老年代版本</p></blockquote>

<h4>Parallel Old收集器</h4>

<blockquote><p>Parallel收集器的老年代版本</p></blockquote>

<h4>CMS收集器</h4>

<blockquote><p>CMS(Concurrent Mark Sweep)收集器是一种以获取最短回收停顿时间为目标的收集器。</p></blockquote>

<ul>
<li>优点：并发收集、低停顿。</li>
<li>缺点：

<ul>
<li>对CPU资源敏感，在并发阶段会因为占用了一部分线程而导致应用程序变慢，总吞吐量会降低，CMS默认启动的回收线程数是(CPU数量+3)/4</li>
<li>无法处理浮动垃圾(Floating Garbage)</li>
<li>“标记-清除”算法收集结束时会有大量空间碎片产生，参数-XX:CMSFullGCsBeforeCompaction，用于设置执行多少次不压缩的Full GC后，跟着来一次带压缩的(默认值为0，表示每次进入Full GC时都进行碎片整理)</li>
</ul>
</li>
</ul>


<h4>G1收集器</h4>

<blockquote><p>一款面向服务端应用的垃圾收集器</p></blockquote>

<p>从JDK6u14中开始就有Early Access版本的G1收集器供开发人员实验、试用。
与其他收集器相比，G1具有如下特点：</p>

<ol>
<li>并行与并发</li>
<li>分代收集</li>
<li>空间整合</li>
<li>可预测的停顿</li>
</ol>


<p>G1收集器的运作大致可划分为以下几个步骤：</p>

<ol>
<li>初始标记（initial Marking）</li>
<li>并发标记（Concurrent Marking）</li>
<li>最终标记（Final Marking）</li>
<li>筛选回收（Live Data Counting and Evacuation）</li>
</ol>


<h4>理解GC日志</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mf">0.202</span><span class="o">:</span> <span class="o">[</span><span class="n">Full</span> <span class="n">GC</span> <span class="o">(</span><span class="n">System</span><span class="o">)</span> <span class="mf">0.202</span><span class="o">:</span> <span class="o">[</span><span class="nl">CMS:</span> <span class="mi">0</span><span class="n">K</span><span class="o">-&gt;</span><span class="mi">330</span><span class="n">K</span><span class="o">(</span><span class="mi">63872</span><span class="n">K</span><span class="o">),</span> <span class="mf">0.0153362</span> <span class="n">secs</span><span class="o">]</span> <span class="mi">5462</span><span class="n">K</span><span class="o">-&gt;</span><span class="mi">330</span><span class="n">K</span><span class="o">(</span><span class="mi">83008</span><span class="n">K</span><span class="o">),</span> <span class="o">[</span><span class="n">CMS</span> <span class="n">Perm</span> <span class="o">:</span> <span class="mi">4629</span><span class="n">K</span><span class="o">-&gt;</span><span class="mi">4628</span><span class="n">K</span><span class="o">(</span><span class="mi">21248</span><span class="n">K</span><span class="o">)],</span> <span class="mf">0.0156160</span> <span class="n">secs</span><span class="o">]</span> <span class="o">[</span><span class="nl">Times:</span> <span class="n">user</span><span class="o">=</span><span class="mf">0.02</span> <span class="n">sys</span><span class="o">=</span><span class="mf">0.01</span><span class="o">,</span> <span class="n">real</span><span class="o">=</span><span class="mf">0.01</span> <span class="n">secs</span><span class="o">]</span>
</span><span class='line'><span class="n">Heap</span>
</span><span class='line'> <span class="n">par</span> <span class="k">new</span> <span class="n">generation</span>   <span class="n">total</span> <span class="mi">19136</span><span class="n">K</span><span class="o">,</span> <span class="n">used</span> <span class="mi">1021</span><span class="n">K</span> <span class="o">[</span><span class="mi">7</span><span class="n">f3000000</span><span class="o">,</span> <span class="mi">7</span><span class="n">f44c0000</span><span class="o">,</span> <span class="mi">7</span><span class="n">f44c0000</span><span class="o">)</span>
</span><span class='line'>  <span class="n">eden</span> <span class="n">space</span> <span class="mi">17024</span><span class="n">K</span><span class="o">,</span>   <span class="mi">6</span><span class="o">%</span> <span class="n">used</span> <span class="o">[</span><span class="mi">7</span><span class="n">f3000000</span><span class="o">,</span> <span class="mi">7</span><span class="n">f30ff6a0</span><span class="o">,</span> <span class="mi">7</span><span class="n">f40a0000</span><span class="o">)</span>
</span><span class='line'>  <span class="n">from</span> <span class="n">space</span> <span class="mi">2112</span><span class="n">K</span><span class="o">,</span>   <span class="mi">0</span><span class="o">%</span> <span class="n">used</span> <span class="o">[</span><span class="mi">7</span><span class="n">f40a0000</span><span class="o">,</span> <span class="mi">7</span><span class="n">f40a0000</span><span class="o">,</span> <span class="mi">7</span><span class="n">f42b0000</span><span class="o">)</span>
</span><span class='line'>  <span class="n">to</span>   <span class="n">space</span> <span class="mi">2112</span><span class="n">K</span><span class="o">,</span>   <span class="mi">0</span><span class="o">%</span> <span class="n">used</span> <span class="o">[</span><span class="mi">7</span><span class="n">f42b0000</span><span class="o">,</span> <span class="mi">7</span><span class="n">f42b0000</span><span class="o">,</span> <span class="mi">7</span><span class="n">f44c0000</span><span class="o">)</span>
</span><span class='line'> <span class="n">concurrent</span> <span class="n">mark</span><span class="o">-</span><span class="n">sweep</span> <span class="n">generation</span> <span class="n">total</span> <span class="mi">63872</span><span class="n">K</span><span class="o">,</span> <span class="n">used</span> <span class="mi">330</span><span class="n">K</span> <span class="o">[</span><span class="mi">7</span><span class="n">f44c0000</span><span class="o">,</span> <span class="mi">7</span><span class="n">f8320000</span><span class="o">,</span> <span class="mi">7</span><span class="n">fae00000</span><span class="o">)</span>
</span><span class='line'> <span class="n">concurrent</span><span class="o">-</span><span class="n">mark</span><span class="o">-</span><span class="n">sweep</span> <span class="n">perm</span> <span class="n">gen</span> <span class="n">total</span> <span class="mi">21248</span><span class="n">K</span><span class="o">,</span> <span class="n">used</span> <span class="mi">4689</span><span class="n">K</span> <span class="o">[</span><span class="mi">7</span><span class="n">fae00000</span><span class="o">,</span> <span class="mi">7</span><span class="n">fc2c0000</span><span class="o">,</span> <span class="mi">800000000</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>最前面的数字<code>0.202</code>代表GC发生的时间，是从Java虚拟机启动以来经过的秒数</li>
<li><code>Full GC</code>说明了这次垃圾收集的停顿类型，有<code>Full</code>说明发生了<code>Stop-The-World</code>，如果是调用<code>system.gc()</code>方法所触发的收集，将显示<code>(System)</code></li>
<li><code>CMS Perm</code>表示GC发生的区域，名称是由收集器决定的。</li>
<li><code>4629K-&gt;4628K(21248K)</code>含义是**GC前该内存区域已使用容量->GC后该内存区域使用容量（该内存区域总容量）</li>
<li><code>0.0156160 secs</code>表示该内存区域GC所占用的时间，单位是秒，当系统有多CPU或者多核的话，多线程操作会叠加这些CPU时间，所以看到user或者sys时间超过real时间是完全正确的。</li>
</ul>


<h3>内存分配与回收策略</h3>

<ul>
<li>自动内存管理：给对象分配内存以及回收分配给对象的内存。</li>
<li>对象主要分配在新生代的Eden区上，如果启动了本地线程分配缓冲，将按线程优先在TLAB上分配。少数情况下也可能会直接分配在老年代中，分配的规则并不是百分之百固定的，其细节取决于当前使用的是哪一种垃圾收集器组合，还有虚拟机中与内存相关的参数的设置。</li>
</ul>


<h4>对象优先在Eden分配</h4>

<blockquote><p>当Eden区没有足够空间进行分配时,虚拟机将发起一次Minor GC（新生代GC）
Major GC(老年代GC)的速度一般会比MinorGC慢10倍以上</p></blockquote>

<h4>大对象直接进入老年代</h4>

<ul>
<li>-XX:PretenureSizeThreshold,令大于这个设置值的对象直接在老年代分配。<strong>只对Serial和ParNew两款收集器有效</strong></li>
</ul>


<h4>长期存活的对象将进入老年代</h4>

<blockquote><p>虚拟机给每个对象定义了一个对象年龄（Age）计数器。如果对象在Eden出生并经过第一次Minor GC后仍然存活，并且能被Survivor容纳的话，将被移动到Survivor空间中，并且对象年龄设为1.</p>

<p>对象每熬过一次Minor GC，年龄就增加一岁，当它的年龄增加到一定程度（默认为15岁），就将会被晋升到老年代中。</p>

<p>对象晋升老年代的年龄阀值，可以通过参数-XX:MaxTenuringThreshold设置。</p></blockquote>

<h4>动态 对象年龄 判定</h4>

<blockquote><p>如果在Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第2章 Java内存区域与内存溢出异常]]></title>
    <link href="http://sargeraswang.com/blog/2014/01/28/javanei-cun-qu-yu-yu-nei-cun-yi-chu-yi-chang/"/>
    <updated>2014-01-28T14:31:00+08:00</updated>
    <id>http://sargeraswang.com/blog/2014/01/28/javanei-cun-qu-yu-yu-nei-cun-yi-chu-yi-chang</id>
    <content type="html"><![CDATA[<blockquote><p>最近在学习周志明的《深入理解Java虚拟机》，写下学习笔记。<br/>
<a href="http://item.jd.com/11252778.html"><img src="http://sargeraswang.com/images/blog_img/jvmbook.jpg" alt="" /></a></p></blockquote>

<h1>运行时数据区</h1>

<ol>
<li>线程共享

<ol>
<li>方法区（Method Area）</li>
<li>（Java）堆（Heap）</li>
</ol>
</li>
<li>线程私有

<ol>
<li>虚拟机栈（VM Stack）</li>
<li>本地方法栈（Native Method Stack）</li>
<li>程序计数器（Program Counter Register）</li>
</ol>


<p><!-- more --></p>

<h3>方法区</h3></li>
<li>方法区用于储存已被虚拟机加载的类信息、常量、静态变量、及时编译器编译后的代码等数据</li>
<li>虽然《规范》中方法区为堆的一个逻辑部分，但它却有一个别名叫做Non-Heap（非堆），目的应该是与Java堆区分开来。</li>
<li>当方法区无法满足内存分配需求时->OutOfMemoryError</li>
</ol>


<h4>运行时常量池（Runtime Constant Pool）</h4>

<ul>
<li>运行时常量池用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放</li>
<li>既然运行时常量池是方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时->OutOfMemoryError</li>
</ul>


<h3>Java堆</h3>

<ul>
<li>Java堆的唯一目的就是存放对象实例。</li>
<li>栈上分配、标量替换优化技术将会导致一些微妙的变化发生，所有的对象都分配在堆上也渐渐变得不是那么“绝对”了。</li>
<li>Java堆是垃圾收集器管理的主要区域，因此很多时候也被称为“GC堆”（Grabage Collected Heap）</li>
<li>如果在堆中没有内存完成实例分配，并且堆也无法再扩展时->OutOfMemoryError</li>
</ul>


<h3>虚拟机栈</h3>

<ul>
<li>虚拟机栈的生命周期与线程相同。</li>
<li>每个方法在执行的同时都会创建一个栈帧（方法运行时的基础数据结构）用于储存

<ol>
<li>局部变量表</li>
<li>操作数栈</li>
<li>动态链接</li>
<li>方法出口<br/>
等信息</li>
</ol>
</li>
<li>通常，Java栈内存和堆内存，中的“栈”说的就是虚拟机栈，或者虚拟机栈中的局部变量表部分</li>
<li>局部变量表存放了编译期间可知的

<ol>
<li>各种基本数据类型（其中64位长度的long和double类型的数据会占用2个局部变量空间，其余数据类型只占用一个）</li>
<li>对象引用类型

<ol>
<li>指向对象起始地址的引用指针</li>
<li>指向一个代表对象的句柄或其他与此对象相关的位置</li>
</ol>
</li>
<li>returnAddress类型（指向了一条字节码指令的地址）</li>
</ol>
</li>
<li>局部变量表所需的内存空间在编译期间完成分配。</li>
<li>在Java虚拟机规范中，对虚拟机栈规定了两种异常状况：

<ol>
<li>线程请求的栈深度大于虚拟机所允许的深度->StackOverflowError</li>
<li>扩展时无法申请到足够的内存->OutOfMemoryError</li>
</ol>
</li>
</ul>


<h3>本地方法栈</h3>

<ul>
<li><strong>本地方法栈</strong>与<strong>虚拟机栈</strong>的区别：

<ul>
<li>虚拟机栈为虚拟机执行Java方法（也就是字节码）服务</li>
<li>本地方法栈为虚拟机使用到的Native方法服务</li>
</ul>
</li>
<li>与<strong>虚拟机栈</strong>一样，->StackOverflowError &amp; OutOfMemoryError</li>
</ul>


<h3>程序计数器</h3>

<ul>
<li>程序计数器可以看做是当前线程所执行的字节码的行号指示器。</li>
<li>Java虚拟机的多线程是通过<strong>线程轮流切换</strong>并<strong>分配处理器执行时间</strong>的方式来实现的。</li>
<li>程序计数器是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</li>
</ul>


<h3>直接内存（Direct Memory）</h3>

<ul>
<li>直接内存并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域。</li>
<li>JDK1.4加入了NIO（New Input/Output），引入了基于通道与缓冲区的I/O方式，可以使用Native函数库直接分配堆外内存。</li>
<li>在配置虚拟机参数时，经常会忽略直接内存，使得各个内存区域总和大于物理内存限制（包括物理的和操作系统级的限制），从而导致动态扩展时->OutOfMemoryError</li>
</ul>


<h1>HotSpot虚拟机对象探秘</h1>

<h3>对象的创建</h3>

<ul>
<li>划分内存：

<ul>
<li>堆中内存绝对规整：指针碰撞（切蛋糕）</li>
<li>堆中内存并不规整：空闲列表（有列表记录哪里可用）</li>
</ul>
</li>
<li>并发情况下划分内存的解决方案：

<ul>
<li>对分配内存空间的动作进行同步处理，实际上虚拟机采用CAS配上失败重试的方式保证更新操作的原子性</li>
<li>把内存分配动作按照线程划分在不同的空间之中进行，每个线程在Java堆中预先分配一小块内存，称为<strong>本地线程分配缓冲</strong>（Thred Local Allocation Buffer,TLAB）</li>
</ul>
</li>
</ul>


<h3>对象的内存布局</h3>

<ul>
<li>在HotSpot虚拟机中，对象在内存中存储的布局可以分为3块区域：对象头（Header）、实例数据（Instance Data）和对齐填充（Padding）。</li>
<li>对象头：

<ul>
<li>用于存储对象自身的运行时数据。</li>
<li>类型指针，即对象指向它的类元数据的指针</li>
<li>如果对象是一个Java数组，在对象头中还必须有一块用于记录数组长度的数据。</li>
</ul>
</li>
<li>实例数据室对象真正存储的有效信息，也是程序代码中所定义的各种类型的字段内容</li>
<li>对齐填充并不是必然存在的，也没有特别的含义，起着<strong>占位符</strong>的作用，因为HotSpot要求对象起始位置必须是8字节的整倍数。</li>
</ul>


<h3>对象的访问定位</h3>

<ul>
<li>主流的访问方式

<ul>
<li>使用句柄：reference->实例数据指针->实例数据
                 &ndash;>类型数据指针->类型数据</li>
<li>直接指针：reference->实例数据（包含类型数据指针）
                               类型数据指针->类型数据</li>
</ul>
</li>
<li>使用句柄来访问的最大好处是reference中存储的是稳定的句柄地址，在对象被移动时只会改变句柄中的实例数据指针，而reference本身不需要修改</li>
<li>使用直接指针最大好处就是速度更快，节省了一次指针定位的时间开销，HotSpot使用直接指针方式进行对象访问</li>
</ul>


<h1>实战：OutOfMemoryError异常</h1>

<ul>
<li>将堆的最小值-Xms参数与最大值-Xmx参数设置为一样即可避免堆自动扩展</li>
<li>通过参数-XX:+HeapDumpOnOutOfMemoryError可以让虚拟机在出现内存溢出异常时Dump出当前的内存堆转储快照以便事后进行分析</li>
</ul>


<h3>Java堆溢出</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * VM Args: -Xms27M -Xmx27M -XX:+HeapDumpOnOutOfMemoryError</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HeapOOM</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">OOMObject</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">OOMObject</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">HeapOOM</span><span class="o">.</span><span class="na">OOMObject</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">OOMObject</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行结果</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">OutOfMemoryError</span><span class="o">:</span> <span class="n">Java</span> <span class="n">heap</span> <span class="n">space</span>
</span><span class='line'><span class="n">Dumping</span> <span class="n">heap</span> <span class="n">to</span> <span class="n">java_pid1089</span><span class="o">.</span><span class="na">hprof</span> <span class="o">...</span>
</span><span class='line'><span class="n">Heap</span> <span class="n">dump</span> <span class="n">file</span> <span class="n">created</span> <span class="o">[</span><span class="mi">34195387</span> <span class="n">bytes</span> <span class="n">in</span> <span class="mf">0.288</span> <span class="n">secs</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中<code>Java heap space</code>说明是Java堆内存溢出</p>

<ul>
<li>内存泄露：进一步查看泄露对象与GC Roots的引用链</li>
<li>内存溢出：

<ul>
<li>检查虚拟机的堆参数（Xmx Xms）与机器物理内存对比看是否还可以调大</li>
<li>从代码上检查是否存在某些对象生命周期过长、持有状态时间过长的情况尝试减少程序运行期的内存消耗</li>
</ul>
</li>
</ul>


<h3>虚拟机栈和本地方法栈溢出</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * VM Args: -Xss128k</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JavaVMStackSOF</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">stackLength</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">stackLeak</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">stackLength</span><span class="o">++;</span>
</span><span class='line'>        <span class="n">stackLeak</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">JavaVMStackSOF</span> <span class="n">sof</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JavaVMStackSOF</span><span class="o">();</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">sof</span><span class="o">.</span><span class="na">stackLeak</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;stack length:&quot;</span> <span class="o">+</span> <span class="n">sof</span><span class="o">.</span><span class="na">stackLength</span><span class="o">);</span>
</span><span class='line'>            <span class="k">throw</span> <span class="n">e</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行结果</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">stack</span> <span class="nl">length:</span><span class="mi">401</span>
</span><span class='line'><span class="n">Exception</span> <span class="n">in</span> <span class="n">thread</span> <span class="s">&quot;main&quot;</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">StackOverflowError</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">io</span><span class="o">.</span><span class="na">github</span><span class="o">.</span><span class="na">sageraswang</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">JavaVMStackSOF</span><span class="o">.</span><span class="na">stackLeak</span><span class="o">(</span><span class="n">JavaVMStackSOF</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">14</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">io</span><span class="o">.</span><span class="na">github</span><span class="o">.</span><span class="na">sageraswang</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">JavaVMStackSOF</span><span class="o">.</span><span class="na">stackLeak</span><span class="o">(</span><span class="n">JavaVMStackSOF</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">15</span><span class="o">)</span>
</span><span class='line'>  <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>创建线程导致内存溢出异常，尝试失败，系统总是假死。</li>
</ul>


<h3>方法区和运行时常量池溢出</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * VM Args: -XX:PermSize=10M -XX:MaxPermSize=10M</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RuntimeConstantPoolOOM</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">i</span><span class="o">++).</span><span class="na">intern</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行结果</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Exception</span> <span class="n">in</span> <span class="n">thread</span> <span class="s">&quot;main&quot;</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">OutOfMemoryError</span><span class="o">:</span> <span class="n">PermGen</span> <span class="n">space</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span><span class="o">.</span><span class="na">intern</span><span class="o">(</span><span class="n">Native</span> <span class="n">Method</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">io</span><span class="o">.</span><span class="na">github</span><span class="o">.</span><span class="na">sageraswang</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">RuntimeConstantPoolOOM</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">RuntimeConstantPoolOOM</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">18</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中<code>PermGen space</code>说明运行时常量池属于方法区（HotSpot虚拟机中的永久代）的一部分</p>

<h4>String.Intern()返回引用的测试</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RuntimeConstantPoolOOM2</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">str1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">(</span><span class="s">&quot;计算机&quot;</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;软件&quot;</span><span class="o">).</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str1</span><span class="o">.</span><span class="na">intern</span><span class="o">()</span> <span class="o">==</span> <span class="n">str1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">String</span> <span class="n">str2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">(</span><span class="s">&quot;ja&quot;</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;va&quot;</span><span class="o">).</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str2</span><span class="o">.</span><span class="na">intern</span><span class="o">()</span> <span class="o">==</span> <span class="n">str2</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>JDK1.6执行结果为两个<code>false</code>,JDK1.7中执行结果为一个<code>true</code>一个<code>false</code>.
因为在JDK1.6中，intern()方法会把首次遇到的字符串实例复制到永久代中，返回的也是这个字符串实例的引用，而由StringBuilder创建的字符串实例在Java堆上，所以必然不是同一个引用</p>

<p>而在JDK1.7中的intern()实现不会再复制实例，只是在常量池中记录首次出现的实例引用，因此intern()返回的引用和StringBuilder创建的那个字符串实例是同一个。对<code>str2</code>比较返回<code>false</code>是因为“java”这个字符串在执行<code>StringBuilder.toString()</code>之前已经出现过，字符串常量中已经出现它的引用了，不符合首次出现的原则。</p></blockquote>

<h4>借助CGLib使方法区出现内存溢出异常</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * VM Args: -XX:PermSize=10M -XX:MaxPermSize=10M</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JavaMethodAreaOOM</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Enhancer</span> <span class="n">enhancer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Enhancer</span><span class="o">();</span>
</span><span class='line'>            <span class="n">enhancer</span><span class="o">.</span><span class="na">setSuperclass</span><span class="o">(</span><span class="n">OOMObject</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>            <span class="n">enhancer</span><span class="o">.</span><span class="na">setUseCache</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>            <span class="n">enhancer</span><span class="o">.</span><span class="na">setCallback</span><span class="o">(</span><span class="k">new</span> <span class="n">MethodInterceptor</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>                <span class="nd">@Override</span>
</span><span class='line'>                <span class="kd">public</span> <span class="n">Object</span> <span class="nf">intercept</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">,</span> <span class="n">Method</span> <span class="n">method</span><span class="o">,</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">,</span> <span class="n">MethodProxy</span> <span class="n">proxy</span><span class="o">)</span>
</span><span class='line'>                        <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">proxy</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">obj</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">});</span>
</span><span class='line'>            <span class="n">enhancer</span><span class="o">.</span><span class="na">create</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">OOMObject</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Exception</span> <span class="n">in</span> <span class="n">thread</span> <span class="s">&quot;main&quot;</span> <span class="n">net</span><span class="o">.</span><span class="na">sf</span><span class="o">.</span><span class="na">cglib</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">CodeGenerationException</span><span class="o">:</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">InvocationTargetException</span><span class="o">--&gt;</span><span class="kc">null</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">net</span><span class="o">.</span><span class="na">sf</span><span class="o">.</span><span class="na">cglib</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">AbstractClassGenerator</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">AbstractClassGenerator</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">237</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">net</span><span class="o">.</span><span class="na">sf</span><span class="o">.</span><span class="na">cglib</span><span class="o">.</span><span class="na">proxy</span><span class="o">.</span><span class="na">Enhancer</span><span class="o">.</span><span class="na">createHelper</span><span class="o">(</span><span class="n">Enhancer</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">377</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">net</span><span class="o">.</span><span class="na">sf</span><span class="o">.</span><span class="na">cglib</span><span class="o">.</span><span class="na">proxy</span><span class="o">.</span><span class="na">Enhancer</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">Enhancer</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">285</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">io</span><span class="o">.</span><span class="na">github</span><span class="o">.</span><span class="na">sageraswang</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">JavaMethodAreaOOM</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">JavaMethodAreaOOM</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">29</span><span class="o">)</span>
</span><span class='line'><span class="n">Caused</span> <span class="nl">by:</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">InvocationTargetException</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">GeneratedMethodAccessor1</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">Unknown</span> <span class="n">Source</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">DelegatingMethodAccessorImpl</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">DelegatingMethodAccessorImpl</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">25</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">Method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">Method</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">597</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">net</span><span class="o">.</span><span class="na">sf</span><span class="o">.</span><span class="na">cglib</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">ReflectUtils</span><span class="o">.</span><span class="na">defineClass</span><span class="o">(</span><span class="n">ReflectUtils</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">384</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">net</span><span class="o">.</span><span class="na">sf</span><span class="o">.</span><span class="na">cglib</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">AbstractClassGenerator</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">AbstractClassGenerator</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">219</span><span class="o">)</span>
</span><span class='line'>  <span class="o">...</span> <span class="mi">3</span> <span class="n">more</span>
</span><span class='line'><span class="n">Caused</span> <span class="nl">by:</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">OutOfMemoryError</span><span class="o">:</span> <span class="n">PermGen</span> <span class="n">space</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ClassLoader</span><span class="o">.</span><span class="na">defineClass1</span><span class="o">(</span><span class="n">Native</span> <span class="n">Method</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ClassLoader</span><span class="o">.</span><span class="na">defineClassCond</span><span class="o">(</span><span class="n">ClassLoader</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">637</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ClassLoader</span><span class="o">.</span><span class="na">defineClass</span><span class="o">(</span><span class="n">ClassLoader</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">621</span><span class="o">)</span>
</span><span class='line'>  <span class="o">...</span> <span class="mi">8</span> <span class="n">more</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><strong>在经常动态生成大量Class的应用中，需要特别注意类的回收状况</strong></p></blockquote>

<h3>本机直接内存溢出</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">sun.misc.Unsafe</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * VM Args: -Xmx20M -XX:MaxDirectMemorySize=10M</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DirectMemoryOOM</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">_1MB</span> <span class="o">=</span> <span class="mi">1024</span> <span class="o">*</span> <span class="mi">1024</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Field</span> <span class="n">unsafeField</span> <span class="o">=</span> <span class="n">Unsafe</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getDeclaredFields</span><span class="o">()[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>        <span class="n">unsafeField</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Unsafe</span> <span class="n">unsafe</span> <span class="o">=</span> <span class="o">(</span><span class="n">Unsafe</span><span class="o">)</span> <span class="n">unsafeField</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">unsafe</span><span class="o">.</span><span class="na">allocateMemory</span><span class="o">(</span><span class="n">_1MB</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><font color='red'>运行10分钟，没有出现异常，待解决。</font></p>

<blockquote><p>由DirectMemory导致的内存溢出，Heap Dump 文件没有明显的异常</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[总结和展望]]></title>
    <link href="http://sargeraswang.com/blog/2014/01/04/zong-jie-he-zhan-wang/"/>
    <updated>2014-01-04T12:06:00+08:00</updated>
    <id>http://sargeraswang.com/blog/2014/01/04/zong-jie-he-zhan-wang</id>
    <content type="html"><![CDATA[<p>新年到，很多大牛都在blog上写下自己的2013总结。回想一下自己，13年的变化还蛮大的，写下来激励自己往前走。</p>

<!-- more -->


<h1>总结2013</h1>

<h3>读书</h3>

<ul>
<li>《记事本圆梦计划》，严格来说，这本书是在2012.12.15读完的，但是它（书中关于人生目标规划的部分）对我13年的影响极大。</li>
<li>《你所不了解的德国人》</li>
<li>《自控力》，这本书可以评为年度影响力最大（对我来说）的书，戒烟，吃素，读书，学习……等等都离不开此书教给我的知识。</li>
<li>《Getting more》</li>
<li><a href="http://cnborn.net/docs/getting_real/">《Getting Real》</a></li>
<li>《反常识经济学》</li>
<li>《在你身边，为你设计》</li>
<li>《专业主义》</li>
<li>《动物庄园》</li>
<li>《just for fun》</li>
<li>《禅与摩托车维修艺术》，被无数大牛推荐过的必读书目，读了四个多月了，还差20%，被我选为‘轻轨书’了，须长时间坐轻轨时看。</li>
</ul>


<h3>习惯</h3>

<ul>
<li>戒烟：长达8年的吸烟史终结了，多亏《自控力》一书。</li>
<li>骑自行车上班：每天来回17公里，雪天除外。</li>
<li>吃素：是因为在youtube上看到一个视频，小女孩问妈妈“我们为什么要杀死动物，他们也是有生命的”，后决定不吃肉了，到目前持续了半年。</li>
<li>blog：无数大牛说了程序员写blog的重要性，遂决定开始写，从去年的光棍节开始的。</li>
</ul>


<h3>工作</h3>

<ul>
<li>有不到半年时间去支援测试部门，现在回想起来，这段时光对我是极为有益的，一是换个角色看软件，知道测试部门看我开发的东西是什么感觉；二是由于测试工作机械单调，业余时间有很多的精力去读书，给改变自己打好基础。</li>
<li>从测试部门回来之后的开发中，已经能感觉到自己的变化，对公用原件的提取，对自己不会的技术的学习能力有提高</li>
<li>与同事共同开发的一个功能，bug非常多，之后分析原因，我想应该是测试不足，那为什么测试不足呢？我想是因为责任不清，我负责前台，他负责后台，任何功能都是我直接调用他的方法，所以我没有去测试调用之后的结果是否正确；他呢，既然提供了接口，那么使用方一定会测试的，自己就没有测试。这就是典型的两个人都是认为对方会去做，结果都没有做的问题。而且因为这是第一次这么分工，吸取教训，下次尽量不要这样分工，如果分了，那就要提前说好，负责前台部分的人要负责功能测试正确。</li>
</ul>


<h1>展望2014</h1>

<h3>读书</h3>

<ul>
<li>技术类

<ul>
<li>《Linux/Unix设计思想》</li>
<li>《Spring技术内幕》</li>
<li>《Struts2技术内幕》</li>
<li>《JQuery权威指南》</li>
<li>《Effective Java》</li>
</ul>
</li>
<li>其他

<ul>
<li>《如何阅读一本书》</li>
<li>《暗时间》</li>
</ul>
</li>
</ul>


<p>目前已经买了还没有读的书就这些，很有可能会因为各种需要优先读其他书，但总体上要多读一些技术类的。</p>

<h3>习惯</h3>

<ul>
<li>已有的戒烟、骑车上班、吃素、写博客要继续保持。</li>
<li>改善作息时间：这个确实很难做到，之前本来已经做到早睡早起了，但是连续加班几天，每天都23点回家，直接就毁掉了好不容易养成的习惯。新的一年，要尽量避免各种原因影响到作息时间。</li>
<li>提高吃的质量，多年来将就着吃，随便吃点儿便宜的，这种做法的影响已经逐渐显现，偶尔的胃痛，食欲不振，精神萎靡。新的一年，保护好胃，只有一个钢铁侠般的身躯才能实现我事业上的梦想。</li>
</ul>


<h3>工作</h3>

<ul>
<li>在前面的博客中我也写到过：目前项目处于最后拼杀的阶段，我不能做逃兵。</li>
<li>这个项目做完之后，要出去闯一闯了，这个公司，从我刚毕业到现在一待就是三年多，就像这个博客最上方写的那样“我常常思考为什么鸟儿拥有整片天空，却常常停留在一个地方。然后我问了自己同样的问题。”，多出去闯一闯，才知道这个世界有多大。</li>
</ul>


<hr />

<p>奔跑吧，少年！！！<br/>
<img src="http://sargeraswang.com/images/blog_img/benpao.jpg" alt="" /></p>
]]></content>
  </entry>
  
</feed>
